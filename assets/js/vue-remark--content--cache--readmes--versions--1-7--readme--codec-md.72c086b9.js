(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{C1wh:function(e,t,a){"use strict";a.r(t);var n=a("7uw+"),s=a("UQSp"),o=a("oCYn");function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}o.default.config.optionMergeStrategies;var r={VueRemarkRoot:s.a},c=function(e){var t=e.options.components=e.options.components||{},a=e.options.computed=e.options.computed||{};Object.keys(r).forEach((function(e){"object"===i(r[e])&&"function"==typeof r[e].render||"function"==typeof r[e]&&"function"==typeof r[e].options.render?t[e]=r[e]:a[e]=function(){return r[e]}}))},p=o.default.config.optionMergeStrategies,d="__vueRemarkFrontMatter",v={excerpt:null,weight:50,"tree-title":"codec",readme:"https://raw.githubusercontent.com/th2-net/th2-codec/master/README.md",title:"Description (4.7.4)"};var l=function(e){e.options[d]&&(e.options[d]=v),o.default.util.defineReactive(e.options,d,v),e.options.computed=p.computed({$frontmatter:function(){return e.options[d]}},e.options.computed)},_=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("VueRemarkRoot",[a("h1",{attrs:{id:"description-474"}},[a("a",{attrs:{href:"#description-474","aria-hidden":"true"}},[e._v("#")]),e._v("Description (4.7.4)")]),a("p",[e._v("This is a common codec library which takes care of some boilerplate stuff like subscribing/publishing to message queues, loading codec settings, etc.")]),a("h1",{attrs:{id:"what-is-a-codec"}},[a("a",{attrs:{href:"#what-is-a-codec","aria-hidden":"true"}},[e._v("#")]),e._v("What is a codec?")]),a("p",[e._v("The codec in th2 is a component that is responsible for transforming messages from human-readable format\ninto a format of a corresponding protocol and vice versa.\nIt contains the main logic for encoding and decoding messages.")]),a("p",[e._v("The codec communicates with other components by sending batches with groups of parsed or/and raw messages.\nDuring encoding, it transforms messages to the corresponding protocol format.\nDuring decoding, it takes all raw messages that correspond to the codec protocol and transforms them according to its rules.")]),a("p",[e._v("Several codecs can be joined into a chain of codecs to reuse already implemented codecs. For example, you have "),a("strong",[e._v("HTTP")]),e._v(", "),a("strong",[e._v("JSON")]),e._v(" and "),a("strong",[e._v("XML")]),e._v(" codec.\nYou can join them together for decoding "),a("strong",[e._v("XML")]),e._v(" over "),a("strong",[e._v("HTTP")]),e._v(" or "),a("strong",[e._v("JSON")]),e._v(" over "),a("strong",[e._v("HTTP")]),e._v(".")]),a("p",[e._v("Here is a schema that illustrates the common place of the th2-codec component in th2.")]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/th2-net/th2-codec/master/doc/img/codec-place-in-th2.svg",title:"Place of th2-codec in th2 schema"}})]),a("h1",{attrs:{id:"how-to-create-your-own-codec"}},[a("a",{attrs:{href:"#how-to-create-your-own-codec","aria-hidden":"true"}},[e._v("#")]),e._v("How to create your own codec?")]),a("p",[e._v("To implement a codec using this library you need to:")]),a("ol",[a("li",[a("p",[e._v("add following repositories into "),a("code",{pre:!0},[e._v("build.gradle")]),e._v(":")]),a("div",{staticClass:"remark-highlight"},[a("pre",{staticClass:"language-groovy"},[a("code",{staticClass:"language-groovy"},[e._v("maven "),a("span",{staticClass:"token punctuation"},[e._v("{")]),e._v("\n    url "),a("span",{staticClass:"token string"},[e._v("'https://s01.oss.sonatype.org/content/repositories/snapshots/'")]),e._v("\n"),a("span",{staticClass:"token punctuation"},[e._v("}")]),e._v("\n\nmaven "),a("span",{staticClass:"token punctuation"},[e._v("{")]),e._v("\n    url "),a("span",{staticClass:"token string"},[e._v("'https://s01.oss.sonatype.org/content/repositories/releases/'")]),e._v("\n"),a("span",{staticClass:"token punctuation"},[e._v("}")]),e._v("\n")])])])]),a("li",[a("p",[e._v("add dependency on "),a("code",{pre:!0},[e._v("com.exactpro.th2:codec:4.7.2")]),e._v(" into "),a("code",{pre:!0},[e._v("build.gradle")])])]),a("li",[a("p",[e._v("set main class to "),a("code",{pre:!0},[e._v("com.exactpro.th2.codec.MainKt")])]),a("blockquote",[a("p",[e._v("This is usually done by using Gradle's "),a("a",{attrs:{href:"https://docs.gradle.org/current/userguide/application_plugin.html",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("application")]),e._v(" plugin where you can set main class like this:")]),a("div",{staticClass:"remark-highlight"},[a("pre",{staticClass:"language-groovy"},[a("code",{staticClass:"language-groovy"},[e._v("application "),a("span",{staticClass:"token punctuation"},[e._v("{")]),e._v("\n   mainClassName "),a("span",{staticClass:"token string"},[e._v("'com.exactpro.th2.codec.MainKt'")]),e._v("\n"),a("span",{staticClass:"token punctuation"},[e._v("}")]),e._v("\n")])])])])]),a("li",[a("p",[e._v("implement the codec itself by implementing "),a("a",{attrs:{href:"https://github.com/th2-net/th2-codec/blob/2707a2755038d49110f6f7eb3e3aeb6188ae0c99/src/main/kotlin/com/exactpro/th2/codec/api/IPipelineCodec.kt#L21",target:"_blank",rel:"nofollow noopener noreferrer"}},[a("code",{pre:!0},[e._v("IPipelineCodec")])]),e._v(" interface:")]),a("div",{staticClass:"remark-highlight"},[a("pre",{staticClass:"language-kotlin"},[a("code",{staticClass:"language-kotlin"},[a("span",{staticClass:"token keyword"},[e._v("interface")]),e._v(" IPipelineCodec "),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" AutoCloseable "),a("span",{staticClass:"token punctuation"},[e._v("{")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("encode")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("messageGroup"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup"),a("span",{staticClass:"token punctuation"},[e._v(")")]),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup "),a("span",{staticClass:"token operator"},[e._v("=")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("TODO")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),a("span",{staticClass:"token string-literal singleline"},[a("span",{staticClass:"token string"},[e._v('"encode(messageGroup) method is not implemented"')])]),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("encode")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("messageGroup"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup"),a("span",{staticClass:"token punctuation"},[e._v(",")]),e._v(" context"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" IReportingContext"),a("span",{staticClass:"token punctuation"},[e._v(")")]),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup "),a("span",{staticClass:"token operator"},[e._v("=")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("encode")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("messageGroup"),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v("\n\n    "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("decode")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("messageGroup"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup"),a("span",{staticClass:"token punctuation"},[e._v(")")]),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup "),a("span",{staticClass:"token operator"},[e._v("=")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("TODO")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),a("span",{staticClass:"token string-literal singleline"},[a("span",{staticClass:"token string"},[e._v('"decode(messageGroup) method is not implemented"')])]),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("decode")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("messageGroup"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup"),a("span",{staticClass:"token punctuation"},[e._v(",")]),e._v(" context"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" IReportingContext"),a("span",{staticClass:"token punctuation"},[e._v(")")]),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" MessageGroup "),a("span",{staticClass:"token operator"},[e._v("=")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("decode")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("messageGroup"),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("override")]),e._v(" "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("close")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v(" "),a("span",{staticClass:"token punctuation"},[e._v("{")]),a("span",{staticClass:"token punctuation"},[e._v("}")]),e._v("\n"),a("span",{staticClass:"token punctuation"},[e._v("}")]),e._v("\n")])])])]),a("li",[a("p",[e._v("implement a factory for it using "),a("a",{attrs:{href:"https://github.com/th2-net/th2-codec/blob/2707a2755038d49110f6f7eb3e3aeb6188ae0c99/src/main/kotlin/com/exactpro/th2/codec/api/IPipelineCodecFactory.kt#L21",target:"_blank",rel:"nofollow noopener noreferrer"}},[a("code",{pre:!0},[e._v("IPipelineCodecFactory")])]),e._v(" interface")]),a("div",{staticClass:"remark-highlight"},[a("pre",{staticClass:"language-kotlin"},[a("code",{staticClass:"language-kotlin"},[a("span",{staticClass:"token keyword"},[e._v("interface")]),e._v(" IPipelineCodecFactory "),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" AutoCloseable "),a("span",{staticClass:"token punctuation"},[e._v("{")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("val")]),e._v(" protocols"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" Set"),a("span",{staticClass:"token operator"},[e._v("<")]),e._v("String"),a("span",{staticClass:"token operator"},[e._v(">")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("val")]),e._v(" settingsClass"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" Class"),a("span",{staticClass:"token operator"},[e._v("<")]),a("span",{staticClass:"token keyword"},[e._v("out")]),e._v(" IPipelineCodecSettings"),a("span",{staticClass:"token operator"},[e._v(">")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token keyword"},[e._v("init")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("dictionary"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" InputStream"),a("span",{staticClass:"token punctuation"},[e._v(")")]),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" Unit "),a("span",{staticClass:"token operator"},[e._v("=")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("TODO")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),a("span",{staticClass:"token string-literal singleline"},[a("span",{staticClass:"token string"},[e._v('"not implemented"')])]),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token keyword"},[e._v("init")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("pipelineCodecContext"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" IPipelineCodecContext"),a("span",{staticClass:"token punctuation"},[e._v(")")]),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" Unit "),a("span",{staticClass:"token operator"},[e._v("=")]),e._v(" pipelineCodecContext"),a("span",{staticClass:"token punctuation"},[e._v("[")]),e._v("DictionaryType"),a("span",{staticClass:"token punctuation"},[e._v(".")]),e._v("MAIN"),a("span",{staticClass:"token punctuation"},[e._v("]")]),a("span",{staticClass:"token punctuation"},[e._v(".")]),a("span",{staticClass:"token function"},[e._v("use")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),a("span",{staticClass:"token operator"},[e._v("::")]),a("span",{staticClass:"token keyword"},[e._v("init")]),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v("\n    "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("create")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),e._v("settings"),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" IPipelineCodecSettings"),a("span",{staticClass:"token operator"},[e._v("?")]),e._v(" "),a("span",{staticClass:"token operator"},[e._v("=")]),e._v(" "),a("span",{staticClass:"token keyword"},[e._v("null")]),a("span",{staticClass:"token punctuation"},[e._v(")")]),a("span",{staticClass:"token operator"},[e._v(":")]),e._v(" IPipelineCodec\n    "),a("span",{staticClass:"token keyword"},[e._v("override")]),e._v(" "),a("span",{staticClass:"token keyword"},[e._v("fun")]),e._v(" "),a("span",{staticClass:"token function"},[e._v("close")]),a("span",{staticClass:"token punctuation"},[e._v("(")]),a("span",{staticClass:"token punctuation"},[e._v(")")]),e._v(" "),a("span",{staticClass:"token punctuation"},[e._v("{")]),a("span",{staticClass:"token punctuation"},[e._v("}")]),e._v("\n"),a("span",{staticClass:"token punctuation"},[e._v("}")]),e._v("\n")])])]),a("blockquote",[a("p",[a("strong",[e._v("NOTE")]),e._v(": both "),a("code",{pre:!0},[e._v("init")]),e._v(" methods have default implementations. One of them "),a("strong",[e._v("must")]),e._v(" be overridden in your factory implementation.\nIf your codec needs the "),a("strong",[e._v("MAIN")]),e._v(" dictionary only you can override the "),a("code",{pre:!0},[e._v("init(dictionary: InputStream)")]),e._v(" method.\nOtherwise, you should override "),a("code",{pre:!0},[e._v("init(pipelineCodecContext: IPipelineCodecContext)")]),e._v(" method.")]),a("p",[a("strong",[e._v("IMPORTANT")]),e._v(": implementation should be loadable via Java's built-in "),a("a",{attrs:{href:"https://docs.oracle.com/javase/9/docs/api/java/util/ServiceLoader.html",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("service loader")])])])]),a("li",[a("p",[e._v("Et voilà! Your codec is now complete")])])]),a("h1",{attrs:{id:"how-it-works"}},[a("a",{attrs:{href:"#how-it-works","aria-hidden":"true"}},[e._v("#")]),e._v("How it works:")]),a("p",[e._v("Codec operates with "),a("a",{attrs:{href:"https://github.com/th2-net/th2-grpc-common/blob/f2794b2c5c8ae945e7500677439809db9c576c43/src/main/proto/th2_grpc_common/common.proto#L97",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("message groups")]),e._v("\nwhom may contain a mix of "),a("a",{attrs:{href:"https://github.com/th2-net/th2-grpc-common/blob/f2794b2c5c8ae945e7500677439809db9c576c43/src/main/proto/th2_grpc_common/common.proto#L84",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("raw")]),e._v("\nand "),a("a",{attrs:{href:"https://github.com/th2-net/th2-grpc-common/blob/f2794b2c5c8ae945e7500677439809db9c576c43/src/main/proto/th2_grpc_common/common.proto#L78",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("parsed")]),e._v(" messages.")]),a("h2",{attrs:{id:"encoding"}},[a("a",{attrs:{href:"#encoding","aria-hidden":"true"}},[e._v("#")]),e._v("Encoding")]),a("p",[e._v("During encoding codec must replace each parsed message of supported "),a("a",{attrs:{href:"https://github.com/th2-net/th2-grpc-common/blob/f2794b2c5c8ae945e7500677439809db9c576c43/src/main/proto/th2_grpc_common/common.proto#L47",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("protocols")]),e._v("\nin a message group with a raw one by encoding parsed message's content")]),a("blockquote",[a("p",[a("strong",[e._v("NOTE")]),e._v(": codec can merge content of subsequent raw messages into a resulting raw message"),a("br"),e._v("\n(e.g. when a codec encodes only a transport layer and its payload is already encoded)")])]),a("h2",{attrs:{id:"decoding"}},[a("a",{attrs:{href:"#decoding","aria-hidden":"true"}},[e._v("#")]),e._v("Decoding")]),a("p",[e._v("During decoding codec must replace each raw message in a message group with a parsed one by decoding raw message's content. \\\nIf exception was thrown, all raw messages will be replaced with th2-codec-error parsed messages")]),a("blockquote",[a("p",[a("strong",[e._v("NOTE")]),e._v(": codec can replace raw message with a parsed message followed by several raw messages\n(e.g. when a codec decodes only a transport layer it can produce a parsed message for the transport layer and several raw messages for its payload)")])]),a("h1",{attrs:{id:"configuration"}},[a("a",{attrs:{href:"#configuration","aria-hidden":"true"}},[e._v("#")]),e._v("Configuration")]),a("p",[e._v("Codec has four types of connection: stream and general for encode and decode functions.")]),a("ul",[a("li",[e._v("stream encode / decode connections works 24 / 7")]),a("li",[e._v("general encode / decode connections works on demand")])]),a("p",[e._v("Codec never mixes messages from the "),a("em",[e._v("stream")]),e._v(" and the "),a("em",[e._v("general")]),e._v(" connections")]),a("h2",{attrs:{id:"codec-settings"}},[a("a",{attrs:{href:"#codec-settings","aria-hidden":"true"}},[e._v("#")]),e._v("Codec settings")]),a("p",[e._v("Codec settings can be specified in "),a("code",{pre:!0},[e._v("codecSettings")]),e._v(" field of "),a("code",{pre:!0},[e._v("custom-config")]),e._v(". These settings will be loaded as an instance of "),a("code",{pre:!0},[e._v("IPipelineCodecFactory.settingsClass")]),e._v(" during start up and then passed to every invocation\nof "),a("code",{pre:!0},[e._v("IPipelineCodecFactory.create")]),e._v(" method")]),a("p",[e._v("For example:")]),a("div",{staticClass:"remark-highlight"},[a("pre",{staticClass:"language-shell"},[a("code",{staticClass:"language-shell"},[e._v("yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  custom-config:\n    codecSettings:\n      messageTypeDetection: BY_INNER_FIELD\n      messageTypeField: "),a("span",{staticClass:"token string"},[e._v('"messageType"')]),e._v("\n      rejectUnexpectedFields: "),a("span",{staticClass:"token boolean"},[e._v("true")]),e._v("\n      treatSimpleValuesAsStrings: "),a("span",{staticClass:"token boolean"},[e._v("false")]),e._v("\n")])])]),a("h2",{attrs:{id:"required-pins"}},[a("a",{attrs:{href:"#required-pins","aria-hidden":"true"}},[e._v("#")]),e._v("Required pins")]),a("p",[e._v("Pins are a part of the main th2 concept. They describe what are the inputs and outputs of a box.\nYou can read more about them "),a("a",{attrs:{href:"https://github.com/th2-net/th2-documentation/wiki/infra:-Theory-of-Pins-and-Links#pins",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("here")]),e._v(".")]),a("p",[e._v("Every type of connection has two "),a("code",{pre:!0},[e._v("subscribe")]),e._v(" and "),a("code",{pre:!0},[e._v("publish")]),e._v(" pins.\nThe first one is used to receive messages to decode/encode while the second one is used to send decoded/encoded messages further.\n"),a("strong",[e._v("Configuration should include at least one pin for each of the following sets of attributes:")])]),a("ul",[a("li",[e._v("Pin for the stream encoding input: "),a("code",{pre:!0},[e._v("encoder_in")]),a("code",{pre:!0},[e._v("parsed")]),a("code",{pre:!0},[e._v("subscribe")])]),a("li",[e._v("Pin for the stream encoding output: "),a("code",{pre:!0},[e._v("encoder_out")]),a("code",{pre:!0},[e._v("raw")]),a("code",{pre:!0},[e._v("publish")])]),a("li",[e._v("Pin for the general encoding input: "),a("code",{pre:!0},[e._v("general_encoder_in")]),a("code",{pre:!0},[e._v("parsed")]),a("code",{pre:!0},[e._v("subscribe")])]),a("li",[e._v("Pin for the general encoding output: "),a("code",{pre:!0},[e._v("general_encoder_out")]),a("code",{pre:!0},[e._v("raw")]),a("code",{pre:!0},[e._v("publish")])]),a("li",[e._v("Pin for the stream decoding input: "),a("code",{pre:!0},[e._v("decoder_in")]),a("code",{pre:!0},[e._v("raw")]),a("code",{pre:!0},[e._v("subscribe")])]),a("li",[e._v("Pin for the stream decoding output: "),a("code",{pre:!0},[e._v("decoder_out")]),a("code",{pre:!0},[e._v("parsed")]),a("code",{pre:!0},[e._v("publish")])]),a("li",[e._v("Pin for the stream decoding input: "),a("code",{pre:!0},[e._v("general_decoder_in")]),a("code",{pre:!0},[e._v("raw")]),a("code",{pre:!0},[e._v("subscribe")])]),a("li",[e._v("Pin for the stream decoding output: "),a("code",{pre:!0},[e._v("general_decoder_out")]),a("code",{pre:!0},[e._v("parsed")]),a("code",{pre:!0},[e._v("publish")])])]),a("h3",{attrs:{id:"configuration-example"}},[a("a",{attrs:{href:"#configuration-example","aria-hidden":"true"}},[e._v("#")]),e._v("Configuration example")]),a("p",[e._v("This configuration is a general way for deploying components in th2.\nIt contains box configuration, pins' descriptions and other common parameters for a box.")]),a("p",[e._v("Here is an example of configuration for component based on th2-codec:")]),a("div",{staticClass:"remark-highlight"},[a("pre",{staticClass:"language-shell"},[a("code",{staticClass:"language-shell"},[e._v("yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  custom-config:\n    codecSettings:\n      parameter1: value\n      parameter2:\n        - value1\n        - value2\n  pins:\n    "),a("span",{staticClass:"token comment"},[e._v("# encoder")]),e._v("\n    - name: in_codec_encode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),e._v(" "),a("span",{staticClass:"token string"},[e._v("'encoder_in'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'parsed'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'subscribe'")]),e._v(" "),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n    - name: out_codec_encode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),e._v(" "),a("span",{staticClass:"token string"},[e._v("'encoder_out'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'raw'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'publish'")]),e._v(" "),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n    "),a("span",{staticClass:"token comment"},[e._v("# decoder")]),e._v("\n    - name: in_codec_decode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'decoder_in'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'raw'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'subscribe'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n    - name: out_codec_decode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'decoder_out'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'parsed'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'publish'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n    "),a("span",{staticClass:"token comment"},[e._v("# encoder general (technical)")]),e._v("\n    - name: in_codec_general_encode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'general_encoder_in'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'parsed'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'subscribe'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n    - name: out_codec_general_encode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'general_encoder_out'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'raw'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'publish'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n    "),a("span",{staticClass:"token comment"},[e._v("# decoder general (technical)")]),e._v("\n    - name: in_codec_general_decode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'general_decoder_in'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'raw'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'subscribe'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n    - name: out_codec_general_decode\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'general_decoder_out'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'parsed'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'publish'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n")])])]),a("h2",{attrs:{id:"message-routing"}},[a("a",{attrs:{href:"#message-routing","aria-hidden":"true"}},[e._v("#")]),e._v("Message routing")]),a("p",[e._v("Schema API allows configuring routing streams of messages via links between connections and filters on pins.\nLet's consider some examples of routing in codec box.")]),a("h3",{attrs:{id:"split-on-publish-pins"}},[a("a",{attrs:{href:"#split-on-publish-pins","aria-hidden":"true"}},[e._v("#")]),e._v("Split on 'publish' pins")]),a("p",[e._v("For example, you got a big source data stream, and you want to split them into some pins via session alias.\nYou can declare multiple pins with attributes "),a("code",{pre:!0},[e._v("['decoder_out', 'parsed', 'publish']")]),e._v(" and filters instead of common pin or in addition to it.\nEvery decoded messages will be direct to all declared pins and will send to MQ only if it passes the filter.")]),a("div",{staticClass:"remark-highlight"},[a("pre",{staticClass:"language-shell"},[a("code",{staticClass:"language-shell"},[e._v("yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  pins:\n    "),a("span",{staticClass:"token comment"},[e._v("# decoder")]),e._v("\n    - name: out_codec_decode_first_session_alias\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'decoder_out'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'parsed'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'publish'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n      filters:\n        - metadata:\n            - field-name: session_alias\n              expected-value: first_session_alias\n              operation: EQUAL\n    - name: out_codec_decode_secon_session_alias\n      connection-type: mq\n      attributes: "),a("span",{staticClass:"token punctuation"},[e._v("[")]),a("span",{staticClass:"token string"},[e._v("'decoder_out'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'parsed'")]),e._v(", "),a("span",{staticClass:"token string"},[e._v("'publish'")]),a("span",{staticClass:"token punctuation"},[e._v("]")]),e._v("\n      filters:\n        - metadata:\n            - field-name: session_alias\n              expected-value: second_session_alias\n              operation: EQUAL\n")])])]),a("p",[e._v("The filtering can also be applied for pins with "),a("code",{pre:!0},[e._v("subscribe")]),e._v(" attribute.")]),a("h2",{attrs:{id:"changelog"}},[a("a",{attrs:{href:"#changelog","aria-hidden":"true"}},[e._v("#")]),e._v("Changelog")]),a("h3",{attrs:{id:"v474"}},[a("a",{attrs:{href:"#v474","aria-hidden":"true"}},[e._v("#")]),e._v("v4.7.4")]),a("h4",{attrs:{id:"changed"}},[a("a",{attrs:{href:"#changed","aria-hidden":"true"}},[e._v("#")]),e._v("Changed:")]),a("ul",[a("li",[e._v("Updated common and BOM versions to remove vulnerable dependencies")])]),a("h3",{attrs:{id:"v473"}},[a("a",{attrs:{href:"#v473","aria-hidden":"true"}},[e._v("#")]),e._v("v4.7.3")]),a("h4",{attrs:{id:"changed-1"}},[a("a",{attrs:{href:"#changed-1","aria-hidden":"true"}},[e._v("#")]),e._v("Changed:")]),a("ul",[a("li",[e._v("Message groups are processed concurrently inside message batches")])]),a("h3",{attrs:{id:"v472"}},[a("a",{attrs:{href:"#v472","aria-hidden":"true"}},[e._v("#")]),e._v("v4.7.2")]),a("h4",{attrs:{id:"fixed"}},[a("a",{attrs:{href:"#fixed","aria-hidden":"true"}},[e._v("#")]),e._v("Fixed:")]),a("ul",[a("li",[e._v("Codec now publishes an error event and an error message successfully when it cannot parse a th2-message. \nThis functionality was broken as "),a("code",{pre:!0},[e._v("NullPointerException")]),e._v(" was thrown during the creation of an error message ")])]),a("h3",{attrs:{id:"v471"}},[a("a",{attrs:{href:"#v471","aria-hidden":"true"}},[e._v("#")]),e._v("v4.7.1")]),a("h4",{attrs:{id:"feature"}},[a("a",{attrs:{href:"#feature","aria-hidden":"true"}},[e._v("#")]),e._v("Feature:")]),a("ul",[a("li",[e._v("Generate error messages with parent event id from an error event")])]),a("h3",{attrs:{id:"v470"}},[a("a",{attrs:{href:"#v470","aria-hidden":"true"}},[e._v("#")]),e._v("v4.7.0")]),a("h4",{attrs:{id:"added"}},[a("a",{attrs:{href:"#added","aria-hidden":"true"}},[e._v("#")]),e._v("Added:")]),a("ul",[a("li",[e._v("Error logs and error events are made more informative (added custom "),a("code",{pre:!0},[e._v("ValidateException")]),e._v(" for validating incoming messages)")])]),a("h3",{attrs:{id:"v461"}},[a("a",{attrs:{href:"#v461","aria-hidden":"true"}},[e._v("#")]),e._v("v4.6.1")]),a("h4",{attrs:{id:"fixed-1"}},[a("a",{attrs:{href:"#fixed-1","aria-hidden":"true"}},[e._v("#")]),e._v("Fixed:")]),a("ul",[a("li",[e._v("Codec continued to work when implementation instance cannot be created")])]),a("h3",{attrs:{id:"v460"}},[a("a",{attrs:{href:"#v460","aria-hidden":"true"}},[e._v("#")]),e._v("v4.6.0")]),a("h4",{attrs:{id:"fixed-2"}},[a("a",{attrs:{href:"#fixed-2","aria-hidden":"true"}},[e._v("#")]),e._v("Fixed:")]),a("ul",[a("li",[e._v("Errors and warnings during encoding does not have message IDs attached because the IDs are not correct yet")])]),a("h4",{attrs:{id:"added-1"}},[a("a",{attrs:{href:"#added-1","aria-hidden":"true"}},[e._v("#")]),e._v("Added:")]),a("ul",[a("li",[e._v("Codec can report warnings during decoding and encoding message groups")])]),a("h4",{attrs:{id:"changed-2"}},[a("a",{attrs:{href:"#changed-2","aria-hidden":"true"}},[e._v("#")]),e._v("Changed:")]),a("ul",[a("li",[e._v("Root codec event's name now uses box name")]),a("li",[e._v("The general encode/decode does not use "),a("code",{pre:!0},[e._v("parentEventId")]),e._v(" from messages when reporting errors and warnings")]),a("li",[e._v("The error/warning events are now attached to the root codec event.")]),a("li",[e._v("The error/warning event is attached to the event that is specified in "),a("code",{pre:!0},[e._v("parentEventId")]),e._v(" as a reference to an event in codec root.")])]),a("h3",{attrs:{id:"v450"}},[a("a",{attrs:{href:"#v450","aria-hidden":"true"}},[e._v("#")]),e._v("v4.5.0")]),a("h4",{attrs:{id:"feature-1"}},[a("a",{attrs:{href:"#feature-1","aria-hidden":"true"}},[e._v("#")]),e._v("Feature:")]),a("ul",[a("li",[e._v("Ability to read more than one dictionary from box configuration in PipelineCodecFactory")]),a("li",[e._v("Pipeline codec implementations can declare several protocols to process, not just one  ")]),a("li",[e._v("Transfers already processed groups through codec without changes,\nfor example, encoder transfers groups with raw messages only and vice versa ")])]),a("h3",{attrs:{id:"v440"}},[a("a",{attrs:{href:"#v440","aria-hidden":"true"}},[e._v("#")]),e._v("v4.4.0")]),a("h4",{attrs:{id:"feature-2"}},[a("a",{attrs:{href:"#feature-2","aria-hidden":"true"}},[e._v("#")]),e._v("Feature:")]),a("ul",[a("li",[e._v("In group required to have all messages (raw messages for decode and parsed for encode) with empty protocol or all filled ")]),a("li",[e._v("Failed protocol assertion produce error message in decode processor")])]),a("h3",{attrs:{id:"v430"}},[a("a",{attrs:{href:"#v430","aria-hidden":"true"}},[e._v("#")]),e._v("v4.3.0")]),a("h4",{attrs:{id:"feature-3"}},[a("a",{attrs:{href:"#feature-3","aria-hidden":"true"}},[e._v("#")]),e._v("Feature:")]),a("ul",[a("li",[e._v("Error event will be sent for each original event id of the message group")]),a("li",[e._v("Common version update to 3.32.0")]),a("li",[e._v("bom version update to 3.1.0")])]),a("h3",{attrs:{id:"v420"}},[a("a",{attrs:{href:"#v420","aria-hidden":"true"}},[e._v("#")]),e._v("v4.2.0")]),a("h4",{attrs:{id:"feature-4"}},[a("a",{attrs:{href:"#feature-4","aria-hidden":"true"}},[e._v("#")]),e._v("Feature:")]),a("ul",[a("li",[e._v("In case of decoding error, instead of skipping the group, replace raw messages of empty or target protocol with "),a("code",{pre:!0},[e._v("th2-codec-error")]),e._v(" message in them")])]),a("h3",{attrs:{id:"v411"}},[a("a",{attrs:{href:"#v411","aria-hidden":"true"}},[e._v("#")]),e._v("v4.1.1")]),a("h4",{attrs:{id:"fixed-3"}},[a("a",{attrs:{href:"#fixed-3","aria-hidden":"true"}},[e._v("#")]),e._v("Fixed:")]),a("ul",[a("li",[e._v("incorrect protocol checking during encoding")])])])}),[],!1,null,null,null);"function"==typeof c&&c(_),"function"==typeof l&&l(_);t.default=_.exports},UQSp:function(e,t,a){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}}}]);