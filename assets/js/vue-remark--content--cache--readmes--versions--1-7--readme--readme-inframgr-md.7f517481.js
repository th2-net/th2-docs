(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"7guV":function(e,t,n){"use strict";n.r(t);var o=n("7uw+"),a=n("UQSp"),s=n("oCYn");function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s.default.config.optionMergeStrategies;var i={VueRemarkRoot:a.a},c=function(e){var t=e.options.components=e.options.components||{},n=e.options.computed=e.options.computed||{};Object.keys(i).forEach((function(e){"object"===r(i[e])&&"function"==typeof i[e].render||"function"==typeof i[e]&&"function"==typeof i[e].options.render?t[e]=i[e]:n[e]=function(){return i[e]}}))},m=s.default.config.optionMergeStrategies,p="__vueRemarkFrontMatter",l={excerpt:null,weight:10,"tree-title":"infra-mgr",readme:"https://raw.githubusercontent.com/th2-net/th2-infra-mgr/master/README.md",title:"infra-mgr"};var h=function(e){e.options[p]&&(e.options[p]=l),s.default.util.defineReactive(e.options,p,l),e.options.computed=m.computed({$frontmatter:function(){return e.options[p]}},e.options.computed)},u=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("VueRemarkRoot",[n("h1",{attrs:{id:"infra-mgr"}},[n("a",{attrs:{href:"#infra-mgr","aria-hidden":"true"}},[e._v("#")]),e._v("infra-mgr")]),n("p",[e._v("infra-mgr is a component responsible for rolling out schemas from git repository to kubernetes.\nIt watches for changes in the repositories and deploys changed components to kubernets.\nDepending on the schema configuration, it also monitors kubernetes and if it detects external manipulation on deployed component, redeploys them from latest repository version.")]),n("h3",{attrs:{id:"schema"}},[n("a",{attrs:{href:"#schema","aria-hidden":"true"}},[e._v("#")]),e._v("Schema")]),n("p",[e._v("A collection of the interconnected components is called a schema and is contained in the single branch of the repository.\nIt is deployed on its own namespace in kubernetes and synchronization is done between repository branch and kubernetes namespace.")]),n("p",[e._v("Schema is composed of kubernets Th2 Custom Resources (CR) of various kinds.\nFor every kind of the CR is designated separate root directory in the repository.\nCR-s are described by kubernetes yaml resource files and are expected to be resided in its own directory.\nCR's file names(not icluding extension) must match kubernetes resource names.")]),n("p",[e._v("All schema and resource names must comply with DNS label names as defined in RFC 1123.\n"),n("a",{attrs:{href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names")])]),n("p",[e._v("See example shema repository for further description of its structure")]),n("h3",{attrs:{id:"configuration"}},[n("a",{attrs:{href:"#configuration","aria-hidden":"true"}},[e._v("#")]),e._v("Configuration")]),n("p",[e._v("infra-mgr configuration is given with "),n("em",[e._v("config.yml")]),e._v(" file that should be on the classpath of the application")]),n("div",{staticClass:"remark-highlight"},[n("pre",{staticClass:"language-shell"},[n("code",{staticClass:"language-shell"},[e._v("yaml\n    git:\n      remoteRepository: git@some.server.com:some/repository\n      "),n("span",{staticClass:"token comment"},[e._v("# git ssh repository URL")]),e._v("\n      \n      localRepositoryRoot: /path/to/cache\n      "),n("span",{staticClass:"token comment"},[e._v("# path to folder where local copy of repository will be cached")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# separate local repository will be created for every branch of remote repository")]),e._v("\n      \n      sshDir: /path/to/key directory\n      "),n("span",{staticClass:"token comment"},[e._v("# path to private key directory to be used for authentication")]),e._v("\n\n      "),n("span",{staticClass:"token comment"},[e._v("# For following configs to work")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# Http link should be provided in `remoteRepository' config")]),e._v("\n\n      httpAuthUsername: username\n      "),n("span",{staticClass:"token comment"},[e._v("# authentication username")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v('# when using token auth for GitLab it should be equal to "oauth2"')]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# when using token auth for GitHub it should be equal to token itself")]),e._v("\n      httpAuthPassword: password\n      "),n("span",{staticClass:"token comment"},[e._v("# authentication password")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# when using token auth for GitLab it should be equal to token itself")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# when using token auth for GitHub it should be equal to empty string")]),e._v("\n\n    rabbitmq:\n      vhostPrefix: schema-\n      "),n("span",{staticClass:"token comment"},[e._v("# this prefix will be prepended to every vHost in RebbitMQ that will be automatically")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# created by infra-operator")]),e._v("\n      \n      usernamePrefix: schema-user-\n      "),n("span",{staticClass:"token comment"},[e._v("# when creating indiviadual user for a schema in RabbitMQ, this prefix will be prepended to schema name")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# to form a username")]),e._v("\n\n      secret: rabbitmq\n      "),n("span",{staticClass:"token comment"},[e._v("# secret name for generated RabiitMQ username and password to be created")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# in schema namespace")]),e._v("\n      \n      passwordLength: "),n("span",{staticClass:"token number"},[e._v("24")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# RabbitMQ password will be generated with this length")]),e._v("\n\n    cassandra:\n      keyspacePrefix: schema_\n      "),n("span",{staticClass:"token comment"},[e._v("# this parameter will be prepended to schema name and will be used as a ")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# keyspace name in cassandra for the schema")]),e._v("\n      \n    kubernetes:\n      namespacePrefix: schema-\n      "),n("span",{staticClass:"token comment"},[e._v("# this parameter will be prepended to schema name and will be used as a ")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# namespace name for the schema")]),e._v("\n\n      ingress: ingress-name\n      "),n("span",{staticClass:"token comment"},[e._v("# name of the ingress HelmRelease to be copied from infra-mgr namespace to schema namespace")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# when deploying schema to kubernetes")]),e._v("\n\n      secretNames:\n        - chart-secrets\n        - git-chart-creds\n        - th2-core\n        - th2-solution\n        - th2-proprietary\n        - th2-schema-test\n        - cassandra\n      "),n("span",{staticClass:"token comment"},[e._v("# list of the secrets to be copied from infra-mgr namespace to schema namespace")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# when deploying schema to kubernetes")]),e._v("\n\n      configMaps:\n        cassandra: cradle\n        logging: java-logging-config\n        rabbitmq: rabbit-mq-app-config\n        rabbitmqManagement: rabbitmq-mng-params\n      "),n("span",{staticClass:"token comment"},[e._v("# individual ConfigMaps for components to be copied from infra-mgr namespace to schema namespace")]),e._v("\n      "),n("span",{staticClass:"token comment"},[e._v("# this ConfigMaps will be populated with schema specific data before copying to target namespace")]),e._v("\n")])])]),n("h2",{attrs:{id:""}}),n("h2",{attrs:{id:"for-api-documentation-please-refer-to"}},[n("a",{attrs:{href:"#for-api-documentation-please-refer-to","aria-hidden":"true"}},[e._v("#")]),e._v("For API documentation please refer to")]),n("p",[n("a",{attrs:{href:"https://github.com/th2-net/th2-infra-mgr/blob/master/API.md",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("API Documentation")])])])}),[],!1,null,null,null);"function"==typeof c&&c(u),"function"==typeof h&&h(u);t.default=u.exports},UQSp:function(e,t,n){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}}}]);