(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{UQSp:function(t,s,e){"use strict";s.a={name:"VueRemarkRoot",render:function(t){return t("div",null,this.$slots.default)}}},pHkj:function(t,s,e){"use strict";e.r(s);var n=e("7uw+"),a=e("UQSp"),o=e("oCYn");function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}o.default.config.optionMergeStrategies;var c={VueRemarkRoot:a.a},_=function(t){var s=t.options.components=t.options.components||{},e=t.options.computed=t.options.computed||{};Object.keys(c).forEach((function(t){"object"===i(c[t])&&"function"==typeof c[t].render||"function"==typeof c[t]&&"function"==typeof c[t].options.render?s[t]=c[t]:e[t]=function(){return c[t]}}))},r=o.default.config.optionMergeStrategies,l="__vueRemarkFrontMatter",v={excerpt:null,weight:40,"tree-title":"check2-recon",readme:"https://raw.githubusercontent.com/th2-net/th2-check2-recon-template/master/README.md",title:"th2-check2-recon"};var p=function(t){t.options[l]&&(t.options[l]=v),o.default.util.defineReactive(t.options,l,v),t.options.computed=r.computed({$frontmatter:function(){return t.options[l]}},t.options.computed)},u=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("VueRemarkRoot",[e("h1",{attrs:{id:"th2-check2-recon"}},[e("a",{attrs:{href:"#th2-check2-recon","aria-hidden":"true"}},[t._v("#")]),t._v("th2-check2-recon")]),e("p",[t._v("This is one of the parts of the "),e("strong",[t._v("th2-check2-recon")]),t._v(" component, or "),e("em",[t._v("recon")]),t._v(" in short. \n"),e("em",[t._v("Recon")]),t._v(" allows you to compare message streams with each other using specified scenarios called "),e("em",[t._v("Rule")]),t._v(". \nThis part is called "),e("strong",[t._v("th2-check2-recon-template")]),t._v(". \nIt contains the implementation of the "),e("em",[t._v("rules")]),t._v(" and the entry point. \nThe main logic and everything you need to create a "),e("em",[t._v("rule")]),t._v(" is contained in the "),e("strong",[t._v("th2_check2_recon")]),t._v(" library from "),e("strong",[t._v("th2-pypi")]),t._v(" Nexus repository.")]),e("p",[t._v("To implement your "),e("em",[t._v("rule")]),t._v(", you need to implement the "),e("em",[t._v("Rule")]),t._v(" class in a separate file in the directory specified\n in the "),e("em",[t._v("rules_package_path")]),t._v(" parameter of the "),e("em",[t._v("custom")]),t._v(" config, inheriting it from \n the "),e("em",[t._v("th2_check2_recon.rule.Rule")]),t._v(" class from the core library \n (an example of implementation can be seen in the demo rules in src/rules).")]),e("p",[t._v("To implement rule means override:")]),e("ul",[e("li",[e("strong",[t._v("get_name()")]),t._v(" - specify the name of "),e("em",[t._v("rule")]),t._v(" in GUI.")])]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\n   def get_name"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("self"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" -"),e("span",{staticClass:"token operator"},[t._v(">")]),t._v(" str:\n       "),e("span",{staticClass:"token builtin class-name"},[t._v("return")]),t._v(" "),e("span",{staticClass:"token string"},[t._v('"Rule_demo"')]),t._v("\n")])]),e("copy-code-btn")],1),e("ul",[e("li",[e("strong",[t._v("get_description()")]),t._v(" - specify the description of "),e("em",[t._v("rule")]),t._v(" in GUI.")])]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\n   def get_description"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("self"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" -"),e("span",{staticClass:"token operator"},[t._v(">")]),t._v(" str:\n       "),e("span",{staticClass:"token builtin class-name"},[t._v("return")]),t._v(" "),e("span",{staticClass:"token string"},[t._v('"Rule_demo is used for demo"')]),t._v("\n")])]),e("copy-code-btn")],1),e("ul",[e("li",[e("strong",[t._v("get_attributes()")]),t._v(" - specify required message stream attributes. ")])]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\n   def get_attributes"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("self"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" -"),e("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),e("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("list"),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(":\n       "),e("span",{staticClass:"token builtin class-name"},[t._v("return")]),t._v(" "),e("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("\n           "),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token string"},[t._v("'parsed'")]),t._v(", "),e("span",{staticClass:"token string"},[t._v("'subscribe'")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v("\n       "),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v("\n")])]),e("copy-code-btn")],1),e("ul",[e("li",[e("strong",[t._v("description_of_groups()")]),t._v(" - specify "),e("em",[t._v("message groups")]),t._v(" into which messages will be distributed.\nYou need to specify the name and type of "),e("em",[t._v("message group")]),t._v(".\nThe "),e("em",[t._v("MessageGroupType.multi")]),t._v(" type means that several messages with the same hash can be stored in one "),e("em",[t._v("message group")]),t._v(".\nThe "),e("em",[t._v("MessageGroupType.single")]),t._v(" type means that all messages in the group have unique hashes.")])]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\n   def description_of_groups"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("self"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" -"),e("span",{staticClass:"token operator"},[t._v(">")]),t._v(" dict:\n       "),e("span",{staticClass:"token builtin class-name"},[t._v("return")]),t._v(" "),e("span",{staticClass:"token punctuation"},[t._v("{")]),e("span",{staticClass:"token string"},[t._v("'ExecutionReport'")]),e("span",{staticClass:"token builtin class-name"},[t._v(":")]),t._v(" MessageGroupType.multi,\n               "),e("span",{staticClass:"token string"},[t._v("'NewOrderSingle'")]),e("span",{staticClass:"token builtin class-name"},[t._v(":")]),t._v(" MessageGroupType.single"),e("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n")])]),e("copy-code-btn")],1),e("ul",[e("li",[e("strong",[t._v("group(message, attributes)")]),t._v(" - specify which group to put the incoming message.")])]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\n   def group"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("self, message: ReconMessage, attributes: tuple"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(":\n       message_type: str "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" message.proto_message.metadata.message_type\n       "),e("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" message_type not "),e("span",{staticClass:"token keyword"},[t._v("in")]),t._v(" "),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token string"},[t._v("'ExecutionReport'")]),t._v(", "),e("span",{staticClass:"token string"},[t._v("'NewOrderSingle'")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(":\n           "),e("span",{staticClass:"token builtin class-name"},[t._v("return")]),t._v("\n       message.group_id "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" message_type\n       message.group_info"),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token string"},[t._v("'message_type'")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" message_type\n")])]),e("copy-code-btn")],1),e("ul",[e("li",[e("strong",[t._v("hash(message, attributes)")]),t._v(" - return computed message hash.\nThis hash is used to quickly compare messages.")])]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\n   def hash"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("self, message: ReconMessage, attributes: tuple"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(":\n       cl_ord_id "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" message.proto_message.fields"),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token string"},[t._v("'ClOrdID'")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(".simple_value\n       message.hash "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" hash"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("message.proto_message.fields"),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token string"},[t._v("'ClOrdID'")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(".simple_value"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n       message.hash_info"),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token string"},[t._v("'ClOrdID'")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" cl_ord_id\n")])]),e("copy-code-btn")],1),e("ul",[e("li",[e("strong",[t._v("check(messages)")]),t._v(" - compares messages in detail. Return "),e("em",[t._v("Event")]),t._v(" for report in GUI.")])]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\n   def check"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("self, messages: "),e("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("ReconMessage"),e("span",{staticClass:"token punctuation"},[t._v("]")]),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" -"),e("span",{staticClass:"token operator"},[t._v(">")]),t._v(" Event:\n       settings "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" ComparisonSettings"),e("span",{staticClass:"token punctuation"},[t._v("(")]),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n       compare_result "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" self.message_comparator.compare"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("messages"),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token number"},[t._v("0")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(".proto_message, messages"),e("span",{staticClass:"token punctuation"},[t._v("[")]),e("span",{staticClass:"token number"},[t._v("1")]),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(".proto_message, settings"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n       verification_component "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" VerificationComponent"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("compare_result.comparison_result"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n\n       info_for_name "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" dict"),e("span",{staticClass:"token punctuation"},[t._v("(")]),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n       "),e("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),e("span",{staticClass:"token for-or-select variable"},[t._v("message")]),t._v(" "),e("span",{staticClass:"token keyword"},[t._v("in")]),t._v(" messages:\n           info_for_name.update"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("message.hash_info"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n\n       body "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" EventUtils.create_event_body"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("verification_component"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n       attach_ids "),e("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),e("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("msg.proto_message.metadata.id "),e("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),e("span",{staticClass:"token for-or-select variable"},[t._v("msg")]),t._v(" "),e("span",{staticClass:"token keyword"},[t._v("in")]),t._v(" messages"),e("span",{staticClass:"token punctuation"},[t._v("]")]),t._v("\n       "),e("span",{staticClass:"token builtin class-name"},[t._v("return")]),t._v(" EventUtils.create_event"),e("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("name"),e("span",{staticClass:"token operator"},[t._v("=")]),t._v("f"),e("span",{staticClass:"token string"},[t._v("\"Match by '{ReconMessage.get_info(info_for_name)}'\"")]),t._v(",\n                                      "),e("span",{staticClass:"token assign-left variable"},[t._v("attached_message_ids")]),e("span",{staticClass:"token operator"},[t._v("=")]),t._v("attach_ids,\n                                      "),e("span",{staticClass:"token assign-left variable"},[t._v("body")]),e("span",{staticClass:"token operator"},[t._v("=")]),t._v("body"),e("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n")])]),e("copy-code-btn")],1),e("p",[t._v("The lifecycle of an incoming message is:\n1. Comes in "),e("em",[t._v("rule")]),t._v(" from some kind of "),e("em",[t._v("pin")]),t._v(". A record about this is written to "),e("em",[t._v("log")]),t._v(".\n2. The "),e("em",[t._v("group(message, attributes)")]),t._v(" method is called for this message. \nIt is calculated in which "),e("em",[t._v("message group")]),t._v(" the message should be placed.\n3. The hash of the message is calculated using the "),e("em",[t._v("hash(message, attributes)")]),t._v(".\n4. Searches for messages with the same hash in other "),e("em",[t._v("message groups")]),t._v(".\n5. If a message with the same hash is found in each group, "),e("em",[t._v("check(messages)")]),t._v(" is called for all these messages. \nDepending on the types of "),e("em",[t._v("message groups")]),t._v(" and their number, \nit will be determined which messages to delete and which to keep.\n6. If no similar messages are found, then just add the message to the group.")]),e("h1",{attrs:{id:"recon-configuration"}},[e("a",{attrs:{href:"#recon-configuration","aria-hidden":"true"}},[t._v("#")]),t._v("Recon configuration")]),e("ul",[e("li",[e("strong",[t._v("recon_name")]),t._v(" - name report in GUI.")]),e("li",[e("strong",[t._v("cache_size")]),t._v(" - maximum "),e("em",[t._v("message group")]),t._v(" size. When the "),e("em",[t._v("message group")]),t._v(" is full, the new message replaces the oldest one. An appropriate event is sent about this.")]),e("li",[e("strong",[t._v("rules_package_path")]),t._v(" - directory where "),e("em",[t._v("rules")]),t._v(" are located.")]),e("li",[e("strong",[t._v("event_batch_max_size")]),t._v(" - maximum number of events in one "),e("em",[t._v("EventBatch")]),t._v(".")]),e("li",[e("strong",[t._v("event_batch_send_interval")]),t._v(" - how often to send "),e("em",[t._v("EventBatch")]),t._v(" with events.")]),e("li",[e("strong",[t._v("rules")]),t._v(" - list of "),e("em",[t._v("rule")]),t._v(" configurations")])]),e("h1",{attrs:{id:"rule-configuration"}},[e("a",{attrs:{href:"#rule-configuration","aria-hidden":"true"}},[t._v("#")]),t._v("Rule configuration")]),e("ul",[e("li",[e("strong",[t._v("name")]),t._v(" - name of the file containing the rule.")]),e("li",[e("strong",[t._v("enabled")]),t._v(" - should "),e("em",[t._v("rule")]),t._v(" be used or not.")]),e("li",[e("strong",[t._v("match_timeout")]),t._v(" - time interval between compared messages in seconds. The current time is taken from the new message. For all messages that arrived earlier than ("),e("em",[t._v("actual_time")]),t._v(" - "),e("em",[t._v("match_timeout")]),t._v(") and did not participate in the checks, the corresponding events will be created.")]),e("li",[e("strong",[t._v("match_timeout_offset_ns")]),t._v(" - the addend for "),e("em",[t._v("match_timeout")]),t._v(" * 1_000_000_000, if precision to nanoseconds is needed.")])]),e("h1",{attrs:{id:"installing"}},[e("a",{attrs:{href:"#installing","aria-hidden":"true"}},[t._v("#")]),t._v("Installing")]),e("p",[t._v("To install all the necessary dependencies, you need to install all the packages from "),e("strong",[t._v("requirements.txt")]),t._v(".\n This can be done with "),e("strong",[t._v("pip install -r requirements.txt")]),t._v(".")]),e("h1",{attrs:{id:"quick-start"}},[e("a",{attrs:{href:"#quick-start","aria-hidden":"true"}},[t._v("#")]),t._v("Quick start")]),e("p",[t._v("The config for a "),e("em",[t._v("Recon")]),t._v(" with two "),e("em",[t._v("rules")]),t._v(" will look like this:")]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: recon\nspec:\n  image-name: some_image_name\n  image-version: some_image_version\n  type: th2-check2-recon\n  custom-config:\n    recon_name: Demo_Recon\n    cache_size: "),e("span",{staticClass:"token number"},[t._v("5000")]),t._v("\n    event_batch_max_size: "),e("span",{staticClass:"token number"},[t._v("100")]),t._v("\n    event_batch_send_interval: "),e("span",{staticClass:"token number"},[t._v("1")]),t._v("\n    rules_package_path: rules\n    rules:\n      - name: "),e("span",{staticClass:"token string"},[t._v('"rule_demo_1"')]),t._v("\n        enabled: "),e("span",{staticClass:"token boolean"},[t._v("true")]),t._v("\n        match_timeout: "),e("span",{staticClass:"token number"},[t._v("10")]),t._v("\n        match_timeout_offset_ns: "),e("span",{staticClass:"token number"},[t._v("0")]),t._v("\n        configuration: "),e("span",{staticClass:"token string"},[t._v('""')]),t._v("\n      - name: "),e("span",{staticClass:"token string"},[t._v('"demo_conn1_vs_demo_conn2"')]),t._v("\n        enabled: "),e("span",{staticClass:"token boolean"},[t._v("true")]),t._v("\n        match_timeout: "),e("span",{staticClass:"token number"},[t._v("10")]),t._v("\n        match_timeout_offset_ns: "),e("span",{staticClass:"token number"},[t._v("0")]),t._v("\n        configuration: "),e("span",{staticClass:"token string"},[t._v('""')]),t._v("\n      - name: "),e("span",{staticClass:"token string"},[t._v('"demo_conn_vs_demo_dc"')]),t._v("\n        enabled: "),e("span",{staticClass:"token boolean"},[t._v("true")]),t._v("\n        match_timeout: "),e("span",{staticClass:"token number"},[t._v("10")]),t._v("\n        match_timeout_offset_ns: "),e("span",{staticClass:"token number"},[t._v("0")]),t._v("\n        configuration: "),e("span",{staticClass:"token string"},[t._v('""')]),t._v("\n      - name: "),e("span",{staticClass:"token string"},[t._v('"log_vs_demo_conn"')]),t._v("\n        enabled: "),e("span",{staticClass:"token boolean"},[t._v("true")]),t._v("\n        match_timeout: "),e("span",{staticClass:"token number"},[t._v("10")]),t._v("\n        match_timeout_offset_ns: "),e("span",{staticClass:"token number"},[t._v("0")]),t._v("\n        configuration: "),e("span",{staticClass:"token string"},[t._v('""')]),t._v("\n      - name: "),e("span",{staticClass:"token string"},[t._v('"refData_vs_demo_conn"')]),t._v("\n        enabled: "),e("span",{staticClass:"token boolean"},[t._v("true")]),t._v("\n        match_timeout: "),e("span",{staticClass:"token number"},[t._v("10")]),t._v("\n        match_timeout_offset_ns: "),e("span",{staticClass:"token number"},[t._v("0")]),t._v("\n        configuration: "),e("span",{staticClass:"token string"},[t._v('""')]),t._v("\n  pins:\n    - name: incoming \n      connection-type: mq\n      attributes:\n        - parsed\n        - subscribe\n    - name: to_util\n      connection-type: grpc\n")])]),e("copy-code-btn")],1),e("p",[t._v("To work, you need to add links for all specified pins. A link to "),e("em",[t._v("th2-util")]),t._v(" is required.")]),e("p",[t._v("Links config:")]),e("div",{staticClass:"remark-highlight"},[e("pre",{staticClass:"language-shell"},[e("code",{staticClass:"language-shell"},[t._v("buildoutcfg\napiVersion: th2.exactpro.com/v1\nkind: Th2Link\nmetadata:\n  name: from-recon-links\nspec:\n  boxes-relation:\n    router-grpc:\n      - name: recon-comon3-to-util\n        from:\n          service-class: com.exactpro.th2.util.MessageComparator\n          strategy: filter\n          box: recon\n          pin: to_util\n        to:\n          service-class: com.exactpro.th2.util.grpc.MessageComparatorService\n          strategy: robin\n          box: util\n          pin: server\n")])]),e("copy-code-btn")],1)])}),[],!1,null,null,null);"function"==typeof _&&_(u),"function"==typeof p&&p(u);s.default=u.exports}}]);