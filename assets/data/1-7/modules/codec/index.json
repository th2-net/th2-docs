{"hash":"09dad6015825ddce9731754e8100a9a440811471","data":{"doc":{"title":"th2-codec","inner_title":"","description":"","content":" \n\n# th2-codec\n\n## Overview \n\nThe **codec** is a component responsible for transforming <term term='message'>messages</term> from human-readable format into a format of a corresponding protocol and vice versa. \nIt contains the main logic for encoding and decoding messages. \nThe **codec** usually uses <term term='dictionary'>dictionary</term> to decode and encode messages. \nDictionaries contain message structures, fields and values that **codec** can decode. \n\n### Encoding\nDuring encoding, **codec** replaces each parsed message of the supported protocols in a message group with a raw one, by encoding parsed message content.\n\nNOTE: **codec** can merge content of subsequent raw messages into a resulting raw message (e.g. when a **codec** encodes only a transport layer and its payload is already encoded).\n\n\n### Decoding\nDuring decoding **codec** must replace each raw message in a message group with a parsed one by decoding raw message content. \nIf an exception was thrown, all raw messages will be replaced with `th2-codec-error` parsed messages.\n\nNOTE: **codec** can replace a raw message with a parsed message followed by several raw messages (e.g. when a **codec** decodes only a transport layer it can produce a parsed message for the transport layer and several raw messages for its payload).\n\nThe schema below describes encoding/decoding processes. \n\n![](./codec_inside_processes.png)\n\n- `raw` - <term term='pin'>pin</term> configuration item, message passing through this pin for processing is in a machine-readable format, ready to be sent or received via according protocol or being decoded.\n\n- `parsed` - pin configuration item, message passing through this pin for processing is in a human-readable format, used in th2.\n\n- `encode` - pin configuration item, message passing through this pin will be translated from parsed to raw.\n\n- `decode` - pin configuration item, message passing through this pin will be translated from raw to parsed.\n\n\nExample of a raw message (FIX protocol):\n```\n8=FIXT.1.19=6835=034=159049=fix-client156=fix-server152=20220608-13:14:37.58110=043\n```\n\nExample of a parsed message (FIX protocol):\n\n```json\n{\n  \"metadata\": {\n    \"id\": {\n      \"connectionId\": {\n        \"sessionAlias\": \"fix-server1\"\n      },\n      \"sequence\": \"1653493560372614018\",\n      \"subsequence\": [\n        1\n      ]\n    },\n    \"timestamp\": \"2022-06-08T13:14:37.582Z\",\n    \"messageType\": \"Heartbeat\",\n    \"protocol\": \"FIX\"\n  },\n  \"fields\": {\n    \"trailer\": {\n      \"messageValue\": {\n        \"fields\": {\n          \"CheckSum\": {\n            \"simpleValue\": \"043\"\n          }\n        }\n      }\n    },\n    \"header\": {\n      \"messageValue\": {\n        \"fields\": {\n          \"BeginString\": {\n            \"simpleValue\": \"FIXT.1.1\"\n          },\n          \"SenderCompID\": {\n            \"simpleValue\": \"fix-client1\"\n          },\n          \"SendingTime\": {\n            \"simpleValue\": \"2022-06-08T13:14:37.581\"\n          },\n          \"TargetCompID\": {\n            \"simpleValue\": \"fix-server1\"\n          },\n          \"MsgType\": {\n            \"simpleValue\": \"0\"\n          },\n          \"MsgSeqNum\": {\n            \"simpleValue\": \"1590\"\n          },\n          \"BodyLength\": {\n            \"simpleValue\": \"68\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Family \n\nThere are 3 types of **codec**-related repositories.\n\n- <term term='box'>Box</term> - use it to translate messages from raw to parsed and back (the name of repository contains the protocol which is used).\n\n- Library - use it to build your own **codec** component.\n\n- Build script collection - use it to translate messages from raw to parsed (and back) with re-using of Sailfish code (see protocols in Readme files of the repository). SEE ALSO: [Sailfish](https://exactpro.com/test-tools/sailfish).\n\n### Box repositories list:\n\n|Box repositories|Type|Comments|\n|---|---|---|\n|[th2-net/th2-codec-grpc](https://github.com/th2-net/th2-codec-grpc)|Box (WIP)|`codec` for gRPC protocol|\n|[th2-net/th2-codec-qfj](https://github.com/th2-net/th2-codec-qfj)|Box (WIP)|\n|[th2-net/th2-codec-open-api](https://github.com/th2-net/th2-codec-open-api)|Box|\n|[th2-net/th2-codec-xml-via-xsd](https://github.com/th2-net/th2-codec-xml-via-xsd)|Box|\n|[th2-net/th2-conn-http-ws-client-template](https://github.com/th2-net/th2-conn-http-ws-client-template)|Box|\n|[th2-net/th2-codec-moldudp64](https://github.com/th2-net/th2-codec-moldudp64)|Box(WIP)|\n|[th2-net/th2-codec-xml](https://github.com/th2-net/th2-codec-xml)|Box|\n|[th2-net/th2-codec-json](https://github.com/th2-net/th2-codec-json)|Box|\n|[th2-net/th2-codec-http](https://github.com/th2-net/th2-codec-http)|Box|\n|[th2-net/th2-codec-html](https://github.com/th2-net/th2-codec-html)|Box|\n|[th2-net/th2-codec-hand](https://github.com/th2-net/th2-codec-hand)|Box|\n|[th2-net/th2-codec-hand-html](https://github.com/th2-net/th2-codec-hand-html)|Box|\n|[th2-net/th2-codec-csv](https://github.com/th2-net/th2-codec-csv)|Box|\n|[th2-net/th2-codec-fix-orchestra](https://github.com/th2-net/th2-codec-fix-orchestra)|Box|\n\n### Library repositories:\n\n- [th2-net/th2-codec](https://github.com/th2-net/th2-codec) — a common **codec** library with basic functionalities of subscribing/publishing to message queues and loading **codec** settings; all **codecs** written specifically for th2 are based on this library.\n\n- [th2-net/th2-grpc-codec](https://github.com/th2-net/th2-grpc-codec) - library containing gRPC interface for **th2-codec** library. This interface can be used to encode/decode messages via RPC call. \n\n- [th2-net/th2-codec-sailfish](https://github.com/th2-net/th2-codec-sailfish) - all **codecs** that use Sailfish as a library are based on this library.\n \n### Build script collection:\n\n[th2-net/th2-codec-generic](https://github.com/th2-net/th2-codec-generic) - a repository that builds FAST, FIX, ITCH, NTG, and SOUP **codecs** using their Sailfish implementation and `th2-codec-sailsfish` as a base.\n\nYou can use a link to a docker image of needed **codec** from its GitHub repository to deploy it using **th2-infra**.\n\n## Functions:\n\nThe **codec** component handles message flows between components such as **conn**, **act**, **check1**, **read** and other. \nOn the scheme below you can see an example of interaction with other th2 components.\n\n![](./codec_interaction_with_other_components.png)\n\nThe **codec** component has eight pins - four for the stream, and four general ones. \nFunctionality of the stream and the general pins is the same. \nA common system setup uses two data flows: 1) to and from the system, and 2) to and from data provider. \nMessages from these flows cannot be mixed. \nOne way to avoid this intersection is to use two instances of a component with four pins. \nAnother option is to configure eight pins – this allows the user to decrease the amount of required settings in **infra-schema** as well as resource utilization of the resulting system. \nGeneral pins are used by the data-provider component, other components are usually connected to the stream pins.\n\n### Why do we need a chain of codecs?\n\nIt is a very common case when the messages you send or receive from the system have the following structure: a transport layer protocol and a payload wrapped into the transport layer. \nThe payload can be any other protocol (even another transport protocol and a different payload wrapped into it). \nAlso, sometimes different systems use the same transport protocol but with the different payload wrapped into it (e.g. HTTP + JSON, HTTP + FIX).\n\nIn case you need to encode/decode a message but do not have a single **codec** for such case, you can reuse already implemented **codecs** by joining them into a chain of **codecs**. It is also recommended for the **codec** to work only with a single protocol.  \nFor example, you have HTTP, JSON and XML **codec**. \nYou can join them together for decoding XML over HTTP or JSON over HTTP.\n\nIf the **codec** component gets a message that does not match an expected format (a raw message of corresponding protocol to `in_codec_decode` pin and a parsed message to `in_codec_encode` pin) it will be sent through the corresponding out pins without changes.\n\n\n## Configuration:  \n\n### Configuration parameters\n\nConfig file includes the following parameters:\n\n- `apiVersion` - API Kubernetes version used to create an object, the only available value - `th2.exactpro.com/v1`.\n\n- `kind`- kind of the created object, possible values - `Th2Box`, `Th2CoreBox`, `Th2Estore`, `Th2Mstore`, `Th2Dictionary`.\n\n- `metadata` (name, UID and optional field namespace) - should be equal to the file name without extension.\n\n- `spec` - required object configuration. This seciton contains `image-name` and `image-version` (including versions), `type`, `custom-config` (component-specific set of parameters), `pins` (to communicate with other boxes).\n\n- `extended-settings: service` - here we specify whether the object is available for other components, envVariables (environment variables for pod deployment), resources (amount of resources available for a Pod), etc. \n\nThe **codec** settings can be specified in `codecSettings` field of `custom-config`. \n\nFor example:\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  custom-config:\n    codecSettings:\n      messageTypeDetection: BY_INNER_FIELD\n      messageTypeField: \"messageType\"\n      rejectUnexpectedFields: true\n      treatSimpleValuesAsStrings: false\n```\n\n### Required pins and links\nThe **codec** has four types of pins: stream encode, stream decode, general encode, general decode.\n\n- _stream encode / decode_ pins are used for all testing activities performed with th2; **act**, **conn**, **sim**, **recon**, **bookchecker** microservices interact with **codec** through the _stream encode / decode_ pins.\n\n- _general encode / decode_ pins work on demand; those pins are mainly used for the th2 report UI: in order to show messages stored in Cassandra to the end user, **report-data-viewer** requests these messages from **rpt-data-provider** via **codec**.\n\nCodec never mixes messages from the _stream_ and the _general_ pins.\n\n<notice info>\n\nSEE ALSO: [stream and general pins description](/1-7/infrastructure/th2-infra-schema/pins/#stream-and-general-codec-pins) \n\n</notice>\n\nPins are a part of the main th2 concept. \nThey describe what are the inputs and outputs of a box. \nYou can read more about them [here](../../infrastructure/th2-infra-schema/pins/).\n\nEvery **codec** operation is associated with 2 pins - `subscribe` and `publish`. \nThe first one is used to receive messages to decode/encode, while the second one is used to send decoded/encoded messages further. \n\n**Typical codec has the following pins**: \n\n- Pin for the _stream encoding_ input: `encoder_in` `parsed` `subscribe`\n\n- Pin for the _stream encoding_ output: `encoder_out` `raw` `publish`\n\n- Pin for the _general encoding_ input: `general_encoder_in` `parsed` `subscribe`\n\n- Pin for the _general encoding_ output: `general_encoder_out` `raw` `publish`\n\n- Pin for the _stream decoding_ input: `decoder_in` `raw` `subscribe`\n\n- Pin for the _stream decoding_ output: `decoder_out` `parsed` `publish`\n\n- Pin for the _general decoding_ input: `general_decoder_in` `raw` `subscribe`\n\n- Pin for the _general decoding_ output: `general_decoder_out` `parsed` `publish`\n\n### Configuration example\n\nAPI Kubernetes documentation contains specification format for any in-built Kubernetes object. th2-specific custom resources can be found in a Readme file of the component repository.\n\n- `name` in metadata must be filled in as a box name.\n\n- `image-name` must contain a <term term='link'>link</term> to the image of **codec** on your project (preferably the last version). For one project you can have more than one **codec** for the same protocol.\n\n- `image-version` should be filled with image tag (version of image in your project’s **codec**).\n\n- `type` specifies the type of component in th2.\n\n- `logFile` - this field is not mandatory and is only filled out in case of the user requiring log information on a very detailed level.\n\n- In `extended-settings.resources`, the `limits` value must be greater than the value of `requests`.\n\n- `service` parameter: to make this component available to other th2 boxes, set `service.enabled` to `true`.\n\nThis configuration is a general way for deploying components in th2. \nIt contains box configuration, pins' descriptions and other common parameters for a box.\n\nYou can configure a specific implementation of **codec** using the `codecSettings` section (Exception: for **codec-sailfish-...**, use `codecParameters` instead of `codecSettings`).\n\nExtended example of the **codec** configuration:\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  custom-config:\n    codecSettings:\n      parameter1: value\n      parameter2:\n        - value1\n        - value2\n  pins:\n    # encoder\n    - name: in_codec_encode\n      connection-type: mq\n      attributes: [ 'encoder_in', 'parsed', 'subscribe' ]\n    - name: out_codec_encode\n      connection-type: mq\n      attributes: [ 'encoder_out', 'raw', 'publish' ]\n    # decoder\n    - name: in_codec_decode\n      connection-type: mq\n      attributes: ['decoder_in', 'raw', 'subscribe']\n    - name: out_codec_decode\n      connection-type: mq\n      attributes: ['decoder_out', 'parsed', 'publish']\n    # encoder general (technical)\n    - name: in_codec_general_encode\n      connection-type: mq\n      attributes: ['general_encoder_in', 'parsed', 'subscribe']\n    - name: out_codec_general_encode\n      connection-type: mq\n      attributes: ['general_encoder_out', 'raw', 'publish']\n    # decoder general (technical)\n    - name: in_codec_general_decode\n      connection-type: mq\n      attributes: ['general_decoder_in', 'raw', 'subscribe']\n    - name: out_codec_general_decode\n      connection-type: mq\n      attributes: ['general_decoder_out', 'parsed', 'publish']\n```\n\n### Codec-related links\nSchema API allows configuring routing streams of the messages via links between the connections and the filters on pins. \nLet's consider some examples of routing in a **codec** box.\n\n \n#### Split on 'publish' pins\nTo split a big source data stream into different pins by session alias, consider declaring multiple pins with attributes `['decoder_out', 'parsed', 'publish']` and filters instead of a common pin or in addition to it. \nEvery decoded message will be directed to all declared pins and will be sent to MQ only if it passes the filter.\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  pins:\n    # decoder\n    - name: out_codec_decode_first_session_alias\n      connection-type: mq\n      attributes: ['decoder_out', 'parsed', 'publish']\n      filters:\n        - metadata:\n            - field-name: session_alias\n              expected-value: first_session_alias\n              operation: EQUAL\n    - name: out_codec_decode_secon_session_alias\n      connection-type: mq\n      attributes: ['decoder_out', 'parsed', 'publish']\n      filters:\n        - metadata:\n            - field-name: session_alias\n              expected-value: second_session_alias\n              operation: EQUAL\n```\n\nThe filtering can also be applied for pins with a `subscribe` attribute.\n\n### Links config\nThe main link for a typical **codec** instance is a dictionary link. \nA linked dictionary serves as a reference for validations performed by a **codec** instance. \n\n\nExample:\n\n```yaml\n##### dictionary-links.yml #####\napiVersion: th2.exactpro.com/v1\nkind: Th2Link\nmetadata:\n  name: dictionary-links\nspec:\n  dictionaries-relation:\n  - name: codec-fix-sell-dictionary\n    box: codec-fix-sell\n    dictionary:\n      name: fix-sell\n      type: MAIN\n```\n#### Connectivity links\nFunctionally, **codec** is a regular th2 box that communicates with other boxes via pins and links. \nTo configure the connections, use a template on the [Links](../../infrastructure/th2-infra-schema/links/#boxes-links) page.\n\n\n\n#### Report Data Provider link(-s)\nFor messages passing through **codec** to be displayed in Report UI, **codec** should be linked to **rpt-data-provider** in the following way:\n\nDedicated to desired **codec**, **rpt-data-provider** pin should be linked to `in_codec_general_decode` **codec** pin.\n\n`out_codec_general_decode` **codec** pin should be linked to **rpt-data-provider** pre-configured dedicated pin for particular **codec**.\n\n\n```yaml\n##### from-codec-links.yml #####\napiVersion: th2.exactpro.com/v1\nkind: Th2Link\nmetadata:\n  name: from-codec-links\nspec:\n  boxes-relation:\n    router-mq:\n    - name: provider-to-codec-fix-sell\n      from:\n        box: rpt-data-provider\n        pin: to_codec-fix-sell\n      to:\n        box: codec-fix-sell\n        pin: in_codec_general_decode\n    - name: codec-fix-sell-to-provider\n      from:\n        box: codec-fix-sell\n        pin: out_codec_general_decode\n      to:\n        box: rpt-data-provider\n        pin: from_codec-fix-sell\n```\n\n## Useful hints \n### How to create your own codec?\n\nTo implement a **codec** using this library you need to:\n\n1. add the following repositories into `build.gradle`:\n\n```groovy\nmaven {\n    url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'\n}\n\nmaven {\n    url 'https://s01.oss.sonatype.org/content/repositories/releases/'\n}\n```\n\n2. add dependency on `com.exactpro.th2:codec:4.6.0` into `build.gradle`\n\n3. set main class to `com.exactpro.th2.codec.MainKt`\n\nThis is usually done by using Gradle application plugin where you can set the main class like this:\n\n```groovy\napplication {\n   mainClassName 'com.exactpro.th2.codec.MainKt'\n}\n```\n\n4. implement `codec` itself by implementing IPipelineCodec interface:\n\n```groovy\ninterface IPipelineCodec : AutoCloseable {\n    fun encode(messageGroup: MessageGroup): MessageGroup = TODO(\"encode(messageGroup) method is not implemented\")\n    fun encode(messageGroup: MessageGroup, context: IReportingContext): MessageGroup = encode(messageGroup)\n    fun decode(messageGroup: MessageGroup): MessageGroup = TODO(\"decode(messageGroup) method is not implemented\")\n    fun decode(messageGroup: MessageGroup, context: IReportingContext): MessageGroup = decode(messageGroup)\n    override fun close() {}\n}\n```\n\n5. implement a factory for it, using the IPipelineCodecFactory interface:\n```groovy\ninterface IPipelineCodecFactory : AutoCloseable {\n    val protocols: Set<String>\n    val settingsClass: Class<out IPipelineCodecSettings>\n    fun init(dictionary: InputStream): Unit = TODO(\"not implemented\")\n    fun init(pipelineCodecContext: IPipelineCodecContext): Unit = pipelineCodecContext[DictionaryType.MAIN].use(::init)\n    fun create(settings: IPipelineCodecSettings? = null): IPipelineCodec\n    override fun close() {}\n}\n```\n**NOTE**: both init methods have default implementations. \nOne of them must be overridden in your factory implementation. \nIf your **codec** needs the MAIN dictionary, only you can override the `init(dictionary: InputStream)` method. \nOtherwise, you should override the `init(pipelineCodecContext: IPipelineCodecContext)` method.\n\n**IMPORTANT**: implementation should be loadable via Java's built-in service loader.\n\n6. That's it! Your **codec** is now complete.\n","fileInfo":{"path":"versions/1-7/modules/codec/_index.md"},"headings":[{"anchor":"#th2-codec","value":"th2-codec","depth":1},{"anchor":"#overview","value":"Overview","depth":2},{"anchor":"#encoding","value":"Encoding","depth":3},{"anchor":"#decoding","value":"Decoding","depth":3},{"anchor":"#family","value":"Family","depth":2},{"anchor":"#box-repositories-list","value":"Box repositories list:","depth":3},{"anchor":"#library-repositories","value":"Library repositories:","depth":3},{"anchor":"#build-script-collection","value":"Build script collection:","depth":3},{"anchor":"#functions","value":"Functions:","depth":2},{"anchor":"#why-do-we-need-a-chain-of-codecs","value":"Why do we need a chain of codecs?","depth":3},{"anchor":"#configuration","value":"Configuration:","depth":2},{"anchor":"#configuration-parameters","value":"Configuration parameters","depth":3},{"anchor":"#required-pins-and-links","value":"Required pins and links","depth":3},{"anchor":"#configuration-example","value":"Configuration example","depth":3},{"anchor":"#codec-related-links","value":"Codec-related links","depth":3},{"anchor":"#split-on-publish-pins","value":"Split on 'publish' pins","depth":4},{"anchor":"#links-config","value":"Links config","depth":3},{"anchor":"#connectivity-links","value":"Connectivity links","depth":4},{"anchor":"#report-data-provider-link-s","value":"Report Data Provider link(-s)","depth":4},{"anchor":"#useful-hints","value":"Useful hints","depth":2},{"anchor":"#how-to-create-your-own-codec","value":"How to create your own codec?","depth":3}],"read_before":[],"continue_learning":[],"terms":[{"id":"message","title":"message","content":"<p>is the unit of transferring data that goes in or out of th2, and circulates inside th2.</p>\n"},{"id":"dictionary","title":"dictionary","content":"<p>is an entity which contains descriptions of application level protocol messages used in System Under Test (SUT). Dictionaries have a unified form and provide human-readable format for th2 users. </p>\n"},{"id":"pin","title":"pin","content":"<p>used by a box to connect th2 microservices between each other to send/receive messages, or to execute gRPC commands.</p>\n<p><a href=\"/1-7/infrastructure/th2-infra-schema/pins\">More</a></p>\n<!--TODO: make more flexible link (avoid mentioning version straight)-->\n"},{"id":"box","title":"box","content":"<p>in general, th2 box is a docker container deployed in Kubernetes as CR (Custom Resource) with the help of Helm, Helm Operator, infra-mgr and infra-operator. From the end-user (QA) standpoint it is a predefined type of th2 microservice that is serving a certain purpose in a chain of components (other microservices).</p>\n"},{"id":"link","title":"link","content":"<p>connects th2 entities (dictionaries or boxes) between each other. </p>\n"}],"related":[{"name":"th2-net/th2-codec","icon":"mdi-github","href":"https://github.com/th2-net/th2-codec"}],"hide_releases":null,"_githubRepository":null}},"context":{}}