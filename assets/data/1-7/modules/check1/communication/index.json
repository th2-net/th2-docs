{"hash":"2526593666a667091e9ec132adb52c3c86765338","data":{"doc":{"title":"check1 - introduction to communication","inner_title":"","description":"","content":"\n# check1 - introduction to communication\n\n## Learn more:\nCheck interacts with other th2 components in th2 through gRPC and RabbitMQ.\n\n- Read more about [gRPC](https://grpc.io/)\n\n<!-- TODO: Read more about th2 gRPC modules here -->\n\n- Read more about [RabbitMQ](https://www.rabbitmq.com/documentation.html)\n\n<!-- TODO: Read about th2 pins here and th2 links  -->\n\n<!-- TODO: Read about th2 components API here -->\n\n- Th2 uses kubernetes. Learn more about kubernetes  [config maps](https://kubernetes.io/docs/concepts/configuration/configmap/)\n\n\n## Overview\n**check1** uses gRPC for the remote procedure calls. \nUse the th2-grpc-check1 [repository](https://github.com/th2-net/th2-grpc-check1) to generate language specific API for **check1**. \nThis repository contains the required `.proto` files for client-server interface and it automatically publishes the required packages.\n\n<!-- TODO: list all possible events created by estore -->\n\n**check1** uses the message broker RabbitMQ for receiving messages to verify.\n\n## Interactions with other components\n\n<!-- FIXME: Remove focus on estore and mstore -->\n\n![](./img/communication_othercomponents.png \"Figure 1. Communication with other components \")\n\n<center> \n<figcaption class=\"mb-2\">\nFigure 1. Communication with other components\n</figcaption>\n</center>\n\n## The check1 service for gRPC\n**check1** receives several requests by gRPC and its responses are defined below.\n\n```protobuf\nservice Check1 {\nrpc createCheckpoint (CheckpointRequest) returns (CheckpointResponse) {}  \nrpc submitCheckRule (CheckRuleRequest) returns (CheckRuleResponse) {}  \nrpc submitCheckSequenceRule(CheckSequenceRuleRequest) returns (CheckSequenceRuleResponse) {}  \nrpc submitNoMessageCheck(NoMessageCheckRequest) returns (NoMessageCheckResponse) {}  \n}\n```\n\n### A checkpoint request\n**check1** receives a checkpoint request and sends back checkpoints to **act**.\n\nThe `CheckpointResponse` contains a checkpoint and the status of the request (`SUCCESS` or `ERROR`).\n\n![](./img/checkpointrequest_class.png \"Figure 2. Definitions for CheckPointRequest and CheckpointResponse illustrating other associations \")\n<center> \n<figcaption class=\"mb-2\">\nFigure 2. Definitions for CheckPointRequest and CheckpointResponse illustrating other associations.\n</figcaption>\n</center>\n\n\n### Rule Requests\n\n**check1** receives verification (rule) requests from the script.\n\nAll the responses to the rule request contain a `chain_id` and the status of the request (`SUCCESS` or `ERROR`).\n\n![](./img/ruleresponse_class.png \"Figure 3. Class diagram of check1 responses \")\n\n<center> \n<figcaption class=\"mb-2\">\nFigure 3. Class diagram of **check1** responses.\n</figcaption>\n</center>\n\n## Messaging\n\nStoring message queues\n\n**check1** receives decoded system messages from the **codec** component via RabbitMQ.\n\n\n![](./img/queue.png \"Figure 4. A queue of messages from the same session alias arranged according to the time received and and direction= FIRST \")\n\n<center>\n<figcaption class=\"mb-2\">\nFigure 4. A queue of messages from the same session alias arranged according to the time received and and direction= FIRST.\n</figcaption>\n</center>\n\nFigure 4 shows a message queue. The queue contains messages of the same `direction` and `session alias`. \nThe messages in the queue are arranged in the order received. \nEach queue is stored in cache and there are separate cache flows for each `session alias` (one for each direction). \nThe size of each cache is determined by the **check1**’s message-cache-size. \nUsers can edit this property in **check1**’s custom configuration.\n\n<notice info>\n\nThe direction of a message can be `FIRST` or `SECOND`. \n`FIRST` messages are from the system under test (default).\n`SECOND` messages are sent to the the system under test.\n\n</notice>\n\n\n## Structure\n\n### Pins\n\n**check1** needs two types of pins for communication: gRPC and MQ.\n\n<notice info> A component can have as many pins as required. </notice>\n\ngrpc pin:\n\n- connects to the script and allows other components to connect via the `com.exactpro.th2.Check1.grpc.Check1Service class`.\n\n\nmq pin:\n\n- Used for listening to the parsed messages. You can link several sources with the different directions and session aliases to it.\n\nmq pin for receiving messages should have `subscribe` and `parsed` attributes\nIn the example below, **check1** has two pins named `server` and `in_parsed_message`\nwith connection types `grpc` and `mq` respectively.\nThe attributes of the MQ pin are `subscribe` and `parsed`.\n\n<!-- TODO: add info about changes from grpc to grpc-client and grpc-server -->\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: Check1\nspec:\n  pins:\n    - name: server\n      connection-type: grpc\n    - name: in_parsed_message\n      connection-type: mq\n      attributes:\n        - \"subscribe\"\n        - \"parsed\"\n```\n\n### Attributes for Pins: connection_type:`mq`\n\n| Attribute Name | Description|\n|---|---|\n|`FIRST`| pin will take only messages which have metadata attribute direction = FIRST|\n|`SECOND`|pin will take only messages which have metadata attribute direction = SECOND|\n| `parsed`| message is transferred in th2 internal format (json-like)|\n| `raw`| message is transferred in the initial system format (sent from/to SUT)|\n| `publish`| the box distributes messages|\n| `subscribe`| the box consumes messages|\n| `event`| the pin sends events to estore (note - this pin is created by default for each box);|\n| `store` | all messages, which are transferred via this pin, will be stored in Cradle|\n\n","fileInfo":{"path":"versions/1-7/modules/check1/communication.md"},"headings":[{"anchor":"#check1---introduction-to-communication","value":"check1 - introduction to communication","depth":1},{"anchor":"#learn-more","value":"Learn more:","depth":2},{"anchor":"#overview","value":"Overview","depth":2},{"anchor":"#interactions-with-other-components","value":"Interactions with other components","depth":2},{"anchor":"#the-check1-service-for-grpc","value":"The check1 service for gRPC","depth":2},{"anchor":"#a-checkpoint-request","value":"A checkpoint request","depth":3},{"anchor":"#rule-requests","value":"Rule Requests","depth":3},{"anchor":"#messaging","value":"Messaging","depth":2},{"anchor":"#structure","value":"Structure","depth":2},{"anchor":"#pins","value":"Pins","depth":3},{"anchor":"#attributes-for-pins-connection_typemq","value":"Attributes for Pins: connection_type:mq","depth":3}],"read_before":[],"continue_learning":[],"terms":[],"related":[{"name":"th2-net/th2-check1","icon":"mdi-github","href":"https://github.com/th2-net/th2-check1"}],"hide_releases":null,"_githubRepository":null}},"context":{}}