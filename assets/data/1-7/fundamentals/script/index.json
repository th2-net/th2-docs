{"hash":"f1fac8b3804d9d2d9aa1546615a25f8ca8c39f01","data":{"doc":{"title":"Script","inner_title":"","description":"","content":"\n# Script\n\nIn computing, the term *script* generally refers to \"[a sequence of instructions or commands for a computer to execute](https://www.merriam-webster.com/dictionary/script)\". \nIn software testing, a script (or a test script) is generally understood as a short program used to test part of the functionality of a software system.\nMost often, test logic implemented in a script describes atomic actions triggering interaction with a system under test and/or performing rule-based checks of varying complexity.\n\nIn th2, the *script* is a piece of code that contains a sequence of instructions for the th2 components. \n\nLogically, this sequence corresponds to a test scenario covering a particular business use case. \nThe script triggers test execution events involving th2 modules that are responsible for separate test actions needed for the test scenario. \nOne of the advantages of th2 is the ability of a test script to cover complex business scenarios and initiate sophisticated rule-based and model-based checks.\n\nTechnically, the script works in the th2 cluster as an external box that interacts with the th2 components. \nIt can be implemented in any programming language. \nThe current implementations in the th2 ecosystem contain libraries and programming modules supporting Python, Java, and Kotlin. \nThese libraries underpin th2's advanced testing capabilities, allowing for more effective implementation of complex testing logic.\n\n\nTo start using the script, you need to set up a th2 cluster with all the necessary components as well as a th2 script entry point within it. \nOnce the script entry point is configured, created connections can be used to interact with the th2 modules. \nEach module is made to implement a certain piece of logic. \nExecution of each and every action might be a complex and time consuming, however, using the methods inside the script makes the process easier. \n\n<notice info>\n\nEach programming module is made to implement a certain piece of logic. \nThese modules help improve the code quality and make its execution more efficient.\nThis is achieved through a possibility to call the methods, corresponding to most common actions, within the script.\n\nThe user implements business logic (a particular test scenario) as a function being invoked during the script execution. \nThe th2 modules decrease complexity of the script as particular actions (behaviors) are encapsulated in those modules.\n\n</notice>\n\n## Typical use\n\nOne of the most common use cases for th2 is active testing, when a test script triggers interaction with the system under test by sending messages and then checks the responses.\n\n\nThe th2 ecosystem provides ready-made components for sending messages (**act**) and performing rule-based checks of system responses (**check1**). \nThe **script** communicates with **act** and **check1** via gRPC, and sends events to **estore** via RabbitMQ. \nThis interaction is shown on the diagram below. \n\n![](./script_pic1.png) \n\n<center> \n<figcaption class=\"mb-2\">\nFigure 1. Communication between the script, the th2 test environment and the system under test (SUT) during testing.\n</figcaption>\n</center>\n\n<notice info>\n\nPrior to being sent to the system under test,  test messages are encoded in the **codec** component. After that, they are picked by the **conn** component to be sent to an external system. \nCorrespondingly, replies from the system go through the **conn** component, are decoded in **codec** and finally arrive back to the scope of this diagram, to **check1** to be verified.\n\n</notice>\n\n## Configuration\n\n**script** runs as an *External Box*. \nThe external box is a box that interacts with the th2 cluster and, instead of Kubernetes, runs inside the user machine. \nIt uses `entry-point` in the th2 cluster to communicate with other modules. \n`entry-point` has pins that allow user to create links (both MQ and gRPC) with other components.\n\n### External box configuration for the script\n\n<notice info>\n\nThere is a custom resource (CR) called “script entry point” in the schema. \nThis CR should be configured to `externalBox: enabled: true` to run the script correctly.\n\n</notice>\n\n#### The entry-point and the script\n\nTechnically, an entry-point is inside the th2 cluster. \nThe **script** is a program that runs \"within\" the entry point. \nIn reality **script** just uses endpoints reserved for the entry point. \nTo create the endpoints for the script, it is required to create a special configuration for the external box in **infra-schema**. \nAn example for configuration of the external box is provided below:\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: script-entry-point\nspec:\n  image-name: dev-script\n  image-version: dev-script\n  type: th2-script\n  pins:\n    - name: to_act\n      connection-type: grpc\n    - name: to_check1\n      connection-type: grpc\n  extended-settings:\n    externalBox:\n      enabled: true\n    service:\n      enabled: false\n```\n\nComments:\n\n- `image-name` and `image-version` are not important as there will be no runtime in a Pod;\n\n- script can not be a gRPC server;\n\n- `extended-settings.externalBox.enabled` should be set to `true`.\n\n### Connect the script to the other boxes\n\nFor interaction with other boxes a special `th2-common` library is used. \nIt contains all the required connectors. \nBut they should be configured before use. \nThere are 2 options to configure the connectors:\n\n1) Specifying settings manually \nIn this case you should get settings from Kubernetes config maps, create configuration files in the project with the script and specify configs folder while creating `CommonFactory` instance.\n\n2) Automatic settings\nIn this case you should have `kubectl` configured to work with your th2 cluster. \nYou should specify Kubernetes namespace and external box name while calling `CommonFactory` constructor method. \nIn the case of previously provided config, the box name will be `script-entry-point`.\n\n#### Common factory class (for specifying settings manually)\n\nThis class contains a set of tools for creating connections between the th2 boxes and the **script**. \nConfiguration of these files varies depending on the components that are to be used in the **script**.\n\nEssentially it transfers .json configuration files shown below to the `CommonFactory` object.\n\n - grpc.json\n\n- mq.json\n\n- rabbit.json\n\n<!--TODO: create a link to the page about API’s: th2 components API -->\n\n<spoiler title=\"Passing .json files to CommonFactory\">\n\nPython example:\n\n```python\n\nfrom th2_common.schema.factory.common_factory import CommonFactory\n\nfactory = CommonFactory(\n    grpc_router_config_filepath=\"./configs/grpc.json\",\n    rabbit_mq_config_filepath=\"./configs/rabbitMQ.json\",\n    mq_router_config_filepath=\"./configs/mq.json\")\n```\n\nJava example:\n\n```java\nimport com.exactpro.th2.common.schema.factory.CommonFactory;\n\nCommonFactory factory = CommonFactory.createFromArguments(\"--configs\", \"./configs\");\n```\n\n</spoiler>\n\n<spoiler title=\"the .json files\">\n\n`grpc.json` file\n\n```json\n{\n  \"services\": {\n    \"Act\": {\n      \"service-class\": \"ActService\",\n      \"endpoints\": {\n        \"act\": {\n          \"host\": \"<kubernetes cluster hostname>\",\n          \"port\": <external port of act pod>\n        }\n      },\n      \"strategy\": {\n        \"name\": \"robin\",\n        \"endpoints\": [\"act\"]\n      }\n    },\n    \"Check1\": {\n      \"service-class\": \"Check1Service\",\n      \"endpoints\": {\n        \"check1\": {\n          \"host\": \"<kubernetes cluster hostname>\",\n          \"port\": <external port of check1 pod>\n        }\n      },\n      \"strategy\": {\n        \"name\": \"robin\",\n        \"endpoints\": [\"check1\"]\n      }\n    }\n  }\n}\n```\n\n- Contains the host and ports of **act** and **check1**\n\n- Service-class: `ActService` or `Check1Service`\n\n- Ports: external port of act pod and check1 pod\n\n- host: kubernetes cluster hostname (cluster IP)\n\n- Where do we find this information?\n\n  - Kubernetes dashboard -> services\n\n  - CLI -> \\`kubectl get services\\`\n\n`mq.json` file\n\n```json\n{\n  \"queues\": {\n    \"event-store-pin\": {\n      \"attributes\": [\n        \"event\",\n        \"publish\"\n      ],\n      \"exchange\": \"<queue exchange. demo_exchange by default>\",\n      \"filters\": [],\n      \"name\": \"<routing-key from script-entry-point to estore>\",\n      \"queue\": \"not_necessary\"\n    }\n  }\n}\n```\n\n- Contains information about the `routing-key` from the `script-entry-point` to the **estore**\n\n- Where do we find this information?\n\n  - Kubernetes dashboard -> config maps -> script-entry-point-app-config\n\n  - RabbitMQ estore-pin queue\n\n`rabbit.json` file\n\n```json\n{\n  \"host\": \"<kubernetes cluster hostname>\",\n  \"vHost\": \"<vHost from RabbitMQ. Equal to namespace name by default.>\",\n  \"port\": \"<external port of RabbitMQ>\",\n  \"username\": \"<RabbitMQ username>\",\n  \"password\": \"<RabbitMQ password>\",\n  \"exchangeName\": \"<queue exchange. demo_exchange by default>\"\n}\n```\n\n- Contains RabbitMQ credentials\n\n- Data source:\n\n  - Kubernetes dashboard -> config maps -> rabbit-mq-app-config\n\n  - RabbitMQ credentials configured in secrets\n\n```\nrabbitmq:\n# set admin user credentials, it will be created during deployment\n  rabbitmqUsername: th2\n  rabbitmqPassword: rab-pass\n  # must be random string\n  rabbitmqErlangCookie: cookie\n```\n\n</spoiler>\n\nAfter transferring `.json` files, you need to create MQ routers and gRPC services. \nThey are the connectors to the required modules.\n\n<spoiler title=\"Example of creating gRPC routers\">\n\n```python\nfrom th2_common.schema.factory.common_factory import CommonFactory\nfrom th2_grpc_act_template.act_service import ActService\nfrom th2_grpc_check1.check1_service import Check1Service\n\ndef connect(config_path, tries=3):\n    try:\n        logging.info('Trying to connect...')\n        factory = CommonFactory(config_path=config_path)\n        grpc_router = factory.grpc_router\n        act = grpc_router.get_service(ActService)\n        check = grpc_router.get_service(Check1Service)\n        estore = factory.event_batch_router\n        logging.info('Connection established.')\n        return {'act': act,\n                'check': check,\n                'estore': estore,\n                'factory': factory}\n    except Exception as e:\n        if tries > 0:\n            logging.error('Unable to connect.')\n            logging.error(str(e))\n            logging.info('Retry in 3...')\n            print(f'Unable to connect: \\n {str(e)}')\n            time.sleep(3)\n            connect(config_path, tries-1)\n        else:\n            raise\n```\n\n</spoiler>\n\n<notice info>\n\nAppropriate packages for ready-to-use th2 modules are available as public packages for Java and Python.\n\n</notice>\n\n<notice info>\n\nIf you are using certain configuration for the script frequently, it can be convenient to create a library with prepared configurations.\n\n</notice>\n\n## Details of implementation\n\nHere you will find an example of implementation steps of the **script**. \nYou can also use other classes with the similar functionality created by you or by the 3rd parties.\n\n### Create an event object\n\nThis action helps to recognize what will happen when the script runs. \nFor creating `event` object we import `Event`, `EventBatch`, `EventID` and `EventStatus` classes from `th2_grpc_common` and the `Timestamp` class from the `google.protobuf.timestamp_pb2` libraries.\n\n![](./script_pic2.png) \n\n<spoiler title=\"Code examples\">\n\nPython example:\n\n```python\nimport uuid\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom th2_grpc_common.common_pb2 import Event, EventBatch, EventID\n\n# Create EventID for future use in requests.\nevent_id = EventID(id=str(uuid.uuid1()))\n\n# Create root Event for report.\ncurrent_timestamp = Timestamp()\ncurrent_timestamp.GetCurrentTime()\nevent = Event(\n    id=event_id,\n    name=\"Raw send example\",\n    status='SUCCESS',\n    start_timestamp=current_timestamp)\n\n# Add this Event to EventBatch.\nevent_batch = EventBatch()\nevent_batch.events.append(event)\n\n# Send EventBatch to estore.\nestore.send(event_batch)\n```\n\nJava example:\n\n```java\nimport java.util.UUID;\nimport com.google.protobuf.util.Timestamps;\nimport com.exactpro.th2.common.grpc.Event;\nimport com.exactpro.th2.common.grpc.EventBatch;\nimport com.exactpro.th2.common.grpc.EventID;\nimport com.exactpro.th2.common.grpc.EventStatus;\n\n// Create EventID for future use in requests.\nEventID eventId = EventID.newBuilder().setId(UUID.randomUUID().toString()).build();\n// Create root Event for report.\nEvent event = Event.newBuilder()\n    .setId(eventId)\n    .setName(\"Raw send example\")\n    .setStatus(EventStatus.SUCCESS)\n    .setStartTimestamp(Timestamps.fromMillis(System.currentTimeMillis()))\n    .build()\n// Add this Event to EventBatch.\nEventBatch eventBatch = EventBatch.newBuilder()\n  .addEvents(event)\n  .build();\n// Send EventBatch to estore.\nestore.send(eventBatch);\n```\n\n</spoiler>\n\n### A message request to **act**\n\nThis action leads to sending message to the system by **act** component. \nTo make it happen you need to create a message using `Message`, `Value`, `MessageID`, `MessageMetadata`, `ConnectionID` and `ListValue` classes from `the th2_grpc_common` library and `datetime` class from the `datetime` library. \nThen, you need to place the message to **act** using `PlaceMessageRequest` class from the `th2_grpc_act_template` library and `ConnectionID` from the `th2_grpc_common` library.\n\n![](./script_pic3.png) \n\n<spoiler title=\"Code examples\">\n\nPython example:\n\n```python\nimport random\nimport string\nfrom datetime import datetime\nfrom th2_grpc_common.common_pb2 import Message, Value, MessageID, MessageMetadata, ConnectionID, ListValue\n\nclordid = \"\".join(random.choice(string.digits) for _ in range(7))\nmessage = Message(\n    metadata=MessageMetadata(\n        message_type=\"NewOrderSingle\",\n        id=MessageID(connection_id=ConnectionID(session_alias=\"demo-conn1\"))),\n    fields={\n        \"Side\": Value(simple_value=\"1\"),\n        \"SecurityID\": Value(simple_value=\"INSTR1\"),\n        \"SecurityIDSource\": Value(simple_value=\"8\"),\n        \"OrdType\": Value(simple_value=\"2\"),\n        \"AccountType\": Value(simple_value=\"1\"),\n        \"OrderCapacity\": Value(simple_value=\"A\"),\n        \"OrderQty\": Value(simple_value=\"100\"),\n        \"Price\": Value(simple_value=\"10\"),\n        \"ClOrdID\": Value(simple_value=clordid),\n        \"SecondaryClOrdID\": Value(simple_value=\"\".join(random.choice(string.ascii_letters) for _ in range(7))),\n        \"TransactTime\": Value(simple_value=datetime.now().isoformat()),\n        \"TradingParty\": Value(message_value=Message(\n            fields={\n                'NoPartyIDs': Value(list_value=ListValue(\n                    values=[\n                        Value(message_value=Message(\n                            metadata=MessageMetadata(message_type='TradingParty_NoPartyIDs'),\n                            fields={\n                                'PartyID': Value(simple_value='Trader1'),\n                                'PartyIDSource': Value(simple_value=\"D\"),\n                                'PartyRole': Value(simple_value=\"76\")\n                            })),\n                        Value(message_value=Message(\n                            metadata=MessageMetadata(message_type='TradingParty_NoPartyIDs'),\n                            fields={\n                                'PartyID': Value(simple_value='0'),\n                                'PartyIDSource': Value(simple_value=\"P\"),\n                                'PartyRole': Value(simple_value=\"3\")\n                            }))\n                    ]))}))\n    }\n)\n```\n\nJava example:\n\n```java\nimport java.time.LocalDateTime;\nimport com.exactpro.th2.common.grpc.ConnectionID;\nimport com.exactpro.th2.common.grpc.ListValue;\nimport com.exactpro.th2.common.grpc.Message;\nimport com.exactpro.th2.common.grpc.MessageID;\nimport com.exactpro.th2.common.grpc.MessageMetadata;\nimport com.exactpro.th2.common.grpc.Value;\n\n\nString clordid = String.valueOf((int)(Math.random() * (int)StrictMath.pow(10, 7)) + (int)StrictMath.pow(10, 7));\n  Message message = Message.newBuilder()\n  .setMetadata(MessageMetadata.newBuilder()\n  .setMessageType(\"NewOrderSingle\")\n  .setId(MessageID.newBuilder()\n  .setConnectionId(ConnectionID.newBuilder()\n  .setSessionAlias(\"demo-conn1\")\n  .build()).build())\n  .build())\n  .putFields(\"Side\", Value.newBuilder().setSimpleValue(\"1\").build())\n  .putFields(\"SecurityID\", Value.newBuilder().setSimpleValue(\"INSTR1\").build())\n  .putFields(\"SecurityIDSource\", Value.newBuilder().setSimpleValue(\"8\").build())\n  .putFields(\"OrdType\", Value.newBuilder().setSimpleValue(\"2\").build())\n  .putFields(\"AccountType\", Value.newBuilder().setSimpleValue(\"1\").build())\n  .putFields(\"OrderCapacity\", Value.newBuilder().setSimpleValue(\"A\").build())\n  .putFields(\"OrderQty\", Value.newBuilder().setSimpleValue(\"100\").build())\n  .putFields(\"Price\", Value.newBuilder().setSimpleValue(\"10\").build())\n  .putFields(\"ClOrdID\", Value.newBuilder().setSimpleValue(clordid).build())\n  .putFields(\"SecondaryClOrdID\", Value.newBuilder().setSimpleValue(\"your random string method\").build())\n  .putFields(\"TransactTime\", Value.newBuilder().setSimpleValue(LocalDateTime.now().toString()).build())\n  .putFields(\"TradingParty\", Value.newBuilder()\n  .setMessageValue(Message.newBuilder()\n  .putFields(\"NoPartyIDs\", Value.newBuilder()\n  .setListValue(ListValue.newBuilder()\n  .addValues(Value.newBuilder()\n  .setMessageValue(Message.newBuilder()\n  .setMetadata(MessageMetadata.newBuilder()\n  .setMessageType(\"TradingParty_NoPartyIDs\")\n  .build())\n  .putFields(\"PartyID\", Value.newBuilder().setSimpleValue(\"Trader1\").build())\n  .putFields(\"PartyIDSource\", Value.newBuilder().setSimpleValue(\"D\").build())\n  .putFields(\"PartyRole\", Value.newBuilder().setSimpleValue(\"76\").build())\n  .build())\n  .build())\n  .addValues(Value.newBuilder()\n  .setMessageValue(Message.newBuilder()\n  .setMetadata(MessageMetadata.newBuilder()\n  .setMessageType(\"TradingParty_NoPartyIDs\")\n  .build())\n  .putFields(\"PartyID\", Value.newBuilder().setSimpleValue(\"0\").build())\n  .putFields(\"PartyIDSource\", Value.newBuilder().setSimpleValue(\"P\").build())\n  .putFields(\"PartyRole\", Value.newBuilder().setSimpleValue(\"3\").build())\n  .build())\n  .build())\n  .build())\n  .build())\n  .build())\n  .build())\n  .build();\n```\n\n</spoiler>\n\n### A verification request to **check1**\n\nThis action helps to verify whether the response from the actual system equals to the expected response. \nFor this we need to filter the messages and then apply verification rule. \nFor filtering we use `MessageFilter`, `FilterOperation` and `ValueFilter` classes from the `th2_grpc_common` library, for sending `check rule request` we use the `th2_grpc_check1` library.\n\n![](./script_pic4.png) \n\n<spoiler title=\"Message filter code examples\">\n\nPython example:\n\n```python\nfrom th2_grpc_common.common_pb2 import MessageFilter, FilterOperation, ValueFilter\n\nmessage_filter = MessageFilter(\n    messageType=\"ExecutionReport\",\n    fields={'ClOrdID': ValueFilter(simple_filter=clordid, key=True),\n            'Side': ValueFilter(simple_filter='1'),\n            'Price': ValueFilter(operation=FilterOperation.NOT_EMPTY),\n            'LeavesQty': ValueFilter(simple_filter='0', operation=FilterOperation.NOT_EQUAL),\n            'OrderID': ValueFilter(simple_filter=response.response_message.fields['OrderID'].simple_value)})\n```\n\nJava example:\n\n```java\nimport com.exactpro.th2.common.grpc.FilterOperation;\nimport com.exactpro.th2.common.grpc.MessageFilter;\nimport com.exactpro.th2.common.grpc.ValueFilter;\n\nMessageFilter messageFilter = MessageFilter.newBuilder()\n  .setMessageType(\"ExecutionReport\")\n  .putFields(\"ClOrdID\", ValueFilter.newBuilder().setSimpleFilter(clordid).setKey(Boolean.TRUE).build())\n  .putFields(\"Side\", ValueFilter.newBuilder().setSimpleFilter(\"1\").build())\n  .putFields(\"Price\", ValueFilter.newBuilder().setOperation(FilterOperation.NOT_EMPTY).build())\n  .putFields(\"LeavesQty\", ValueFilter.newBuilder().setSimpleFilter(\"0\").setOperation(FilterOperation.NOT_EQUAL).build())\n  .putFields(\"OrderID\", ValueFilter.newBuilder().setSimpleFilter(response.getResponseMessage().getFieldsMap().get(\"OrderID\").getSimpleValue()).build())\n  .build();\n```\n\n</spoiler>\n\n<spoiler title=\"Check rule request code examples\">\n\nPython example:\n\n```python\nfrom th2_grpc_check1.check1_pb2 import CheckRuleRequest\n\ncheck1_request = CheckRuleRequest(\n    connectivity_id=ConnectionID(session_alias=\"demo-conn1\"),\n    filter=message_filter,\n    checkpoint=response.checkpoint_id,\n    timeout=3000,\n    parent_event_id=event_id,\n    description=\"User receives the ExecutionReport message.\"\n)\ncheck1_response = check.submitCheckRule(check1_request)\n```\n\nJava example:\n\n```java\nimport com.exactpro.th2.check1.grpc.CheckRuleRequest;\nimport com.exactpro.th2.check1.grpc.CheckRuleResponse;\nimport com.exactpro.th2.common.grpc.ConnectionID;\n\nCheckRuleRequest check1Request = CheckRuleRequest.newBuilder()\n  .setConnectivityId(ConnectionID.newBuilder()\n  .setSessionAlias(\"demo-conn1\").build())\n  .setFilter(messageFilter)\n  .setCheckpoint(response.getCheckpointId())\n  .setTimeout(3000)\n  .setParentEventId(eventId)\n  .setDescription(\"User receives the ExecutionReport message.\")\n  .build();\n\n  CheckRuleResponse check1Response = check1.submitCheckRule(check1Request);\n```\n\n</spoiler>\n\n<!--TODO: create a link to \"Writing your own script\" -->\n","fileInfo":{"path":"versions/1-7/fundamentals/script/_index.md"},"headings":[{"anchor":"#script","value":"Script","depth":1},{"anchor":"#typical-use","value":"Typical use","depth":2},{"anchor":"#configuration","value":"Configuration","depth":2},{"anchor":"#external-box-configuration-for-the-script","value":"External box configuration for the script","depth":3},{"anchor":"#the-entry-point-and-the-script","value":"The entry-point and the script","depth":4},{"anchor":"#connect-the-script-to-the-other-boxes","value":"Connect the script to the other boxes","depth":3},{"anchor":"#common-factory-class-for-specifying-settings-manually","value":"Common factory class (for specifying settings manually)","depth":4},{"anchor":"#details-of-implementation","value":"Details of implementation","depth":2},{"anchor":"#create-an-event-object","value":"Create an event object","depth":3},{"anchor":"#a-message-request-to-act","value":"A message request to ","depth":3},{"anchor":"#a-verification-request-to-check1","value":"A verification request to ","depth":3}],"read_before":[],"continue_learning":[],"terms":[],"related":[],"hide_releases":null,"_githubRepository":null}},"context":{}}