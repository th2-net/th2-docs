{"hash":"abeff389279d6af89c434cc24d3a5ad91fcb6e17","data":{"doc":{"title":"3. Deploy th2","inner_title":"","description":"3. Deploy th2\n\nAs all the environments are prepared, we can install th2.","content":"\n# 3. Deploy th2\n\nAs all the environments are prepared, we can install th2.\n\n<!--more-->\n\n## Prerequisites\nBefore you begin, please check that you have:\n* fully functioning Kubernetes cluster suitable for your business needs (please refer to [technical requirements](../requirements));\n* an operator box that meets [hardware](../requirements/hardware) and [software](../requirements/software) requirements;\n* installed [Apache Cassandra](https://cassandra.apache.org/) ([technical requirements](../requirements/hardware#apache-cassandra-cluster-hardware-requirements)).\n  \nAll th2 components are deployed via Helm charts by [Helm](https://helm.sh/) and [Helm Operator](https://docs.fluxcd.io/projects/helm-operator/en/stable/).\n\n\n## Download infra values\nInstallation of th2-infra requires a Git repository for maintaining th2 infra-schema configuration. The information regarding this repository and its usage can be found in the guide further.\n* [These example values](https://github.com/th2-net/th2-infra/tree/master/example-values) can be used as a starter kit for th2 infra, we also recommend storing these values in a separate Git repository.\n\nThe first step of the th2 deployment process is copying th2-infra repository into your operator box:\n\n```shell\ngit clone -b v1.7.3 https://github.com/th2-net/th2-infra.git\n```\n\nChange the current directory:\n\n```shell\ncd ./th2-infra/example-values\n```\n\n\n## Infrastructure namespaces\n\nInside the cluster separate namespaces can be created. Custom infra-schemas can have their namespaces.\n\n<notice info>\n\nThe \"infra-schema\" part in the *infra-schema* namespace is a placeholder to be replaced with a user-defined name of a custom infra-schema (corresponds to the name of the repository branch containing a particular infra-schema implementation).\n\n</notice>\n\nInfrastructure components are split into two namespaces: _monitoring_ and _service_. These namespaces will be created below.\n\nThe following components of monitoring stack are deployed into _monitoring_ namespace:\n\n<recommendations :items=\"$frontmatter.monitoring_links\"></recommendations>\n\nThe _service_ namespace is used for infrastructure services:\n\n<recommendations :items=\"$frontmatter.service_links\"></recommendations>\n  \nand for th2-infra components:\n\n<recommendations :items=\"$frontmatter.infra_links\"></recommendations>\n\n### Create namespaces\n\n```shell\nkubectl create namespace monitoring\nkubectl create namespace service\n```\n\n<spoiler title=\"Output example\">\n\n```shell\n$ kubectl create namespace monitoring\nnamespace/monitoring created\n$ kubectl create namespace service\nnamespace/service created\n```\n\n</spoiler>  \n\nThe following pictures describe *service* and *monitoring* namespaces:\n\n![service_namespace](./service_namespace.png)\n\n\n![monitoring_namespace](./monitoring_namespace.png)\n\n## Data persistence\n\nData persistence is required for the following components: Grafana, Prometheus, Loki, RabbitMQ and should be set up on this step.\n\n<notice info>\n\nExamples below use HostPath type of [Persistent Volume(PV)](https://kubernetes.io/docs/concepts/storage/persistent-volumes/). \nPlease read the documentation to choose an appropriate PV type for your environment.\n\n</notice>\n\n* Create directories on the th2 node (the following command can require root permissions):\n\n```shell\nmkdir /opt/grafana /opt/prometheus /opt/loki /opt/rabbitmq\n```\n\n* Set node name in `pvs.yaml`.\n* Create PVs and PVCs:\n```shell\nkubectl apply -f ./pvs.yaml\nkubectl apply -f ./pvcs.yaml\n```\n\n### PV for read components\n\nTo include **read** components in your configuration, a dedicated PersistentVolume for **read** log directory needs to be set up.\nAdd a PersistentVolume mapped to the `/opt/components` directory.  Once an *infra-schema* namespace is installed, create a PersistentVolumeClaim. \n\nPV and PVC examples can be found in `example-values/persistence/`.\n\n```shell\nmkdir /opt/components\n```\n* Set node name in `persistence/pv.yaml`.\n* Create PV:\n```shell\nkubectl apply -f ./persistence/pv.yaml\n```\n\n## Monitoring deployment\n\n<notice note> \n\nIt's an optional step, but it provides an easier way to check the result of the installation. \nIn all installation commands we explicitly define namespaces to avoid possible mistakes.\n\n</notice>\n\n* Switch the namespace to _monitoring_:\n```shell\nkubectl config set-context --current --namespace=monitoring\n```\n\n<notice note>\n\nGrafana and Dashboard hostnames should be configured only if you have a DNS name. IP address configuration is not required. \n\n</notice>\n\n* Define Grafana and Dashboard hostnames (the name must be resolved from the tester boxes):\n  * in the [service.values.yaml](https://github.com/th2-net/th2-infra/blob/v1.7.3/example-values/service.values.yaml) file:\n    ```yaml\n    ingress:\n      host: &host <th2_host_name>\n    kubernetes-dashboard:\n      ingress:\n        hosts: [*host]\n    ```\n  * in the [prometheus-operator.values.yaml](https://github.com/th2-net/th2-infra/blob/v1.7.3/example-values/prometheus-operator.values.yaml) file:\n    ```yaml\n    grafana:\n      ingress:\n        hosts:\n          - <th2_host_name>\n    ```\n\n* Deploy components:\n```shell\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm install --version=2.4.1 loki -n monitoring grafana/loki-stack -f ./loki.values.yaml\nhelm install --version=15.0.0 prometheus -n monitoring prometheus-community/kube-prometheus-stack -f ./prometheus-operator.values.yaml\n```\n* Check the result:\n```shell\n$ kubectl get pods\nNAME                                                     READY   STATUS    RESTARTS   AGE\n........\nalertmanager-prometheus-prometheus-oper-alertmanager-0   2/2     Running   0          75s\nloki-0                                                   1/1     Running   0          4m47s\nloki-promtail-wqfml                                      1/1     Running   0          4m47s\nprometheus-grafana-68f8dd6d57-2gtns                      2/2     Running   0          82s\nprometheus-kube-state-metrics-75d4cc9dbd-psb88           1/1     Running   0          82s\nprometheus-prometheus-node-exporter-gfzp6                1/1     Running   0          82s\nprometheus-prometheus-oper-operator-df668d457-snxks      1/1     Running   0          82s\nprometheus-prometheus-prometheus-oper-prometheus-0       3/3     Running   1          65s        \n........\n```\n\n## Access for infra-mgr to the th2 infra-schema Git repository\n\n### SSH key\n\nSSH access with write permissions is required by **infra-mgr** component.\n\n* Generate keys without a passphrase:  \n```\n$ ssh-keygen -t rsa -m pem -f ./infra-mgr-rsa.key\n``` \n* [Add a new deploy key to your infra-schema repository on GitHub ](https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys).\n* Create infra-mgr secret from the private key:\n```\n$ kubectl -n service create secret generic infra-mgr --from-file=id_rsa=./infra-mgr-rsa.key\n```\n\n* set `infraMgr.git.repository` value in the [service.values.yaml](https://github.com/th2-net/th2-infra/blob/v1.7.3/example-values/service.values.yaml) file to `ssh` link of your infra-schema repository, e.g:\n```yaml\ninfraMgr:\n  git:\n    repository: git@github.com:th2-net/th2-infra-demo-configuration.git\n```\n\n### Personal access token\n\nDue to the [improvements in Git protocol security](https://github.blog/2021-09-01-improving-git-protocol-security-github/) on GitHub, keys supported in ssh have underwent changes. \nThese changes affected the th2 ssh connections to the GitHub repositories. \nSSH keys generated with RSA algorithm are no longer accepted when uploaded to GitHub after March 15, 2022. \nHowever, the keys uploaded before this date continue to work.\n\nGitHub repositories can be accessed via personal access tokens. \nIn case you cannot use a token, update your th2 version to use ssh connection.\n\n<recommendations :items=\"$frontmatter.tokens_link\" ></recommendations>\n\nIt is required to grant permissions from `repo` scope. \nOther permissions are not needed.\n\n![Token permissions](./gh-token-permissions.png)\n\nSet `infraMgr.git.repository` value in the [service.values.yaml](https://github.com/th2-net/th2-infra/blob/v1.7.3/example-values/service.values.yaml) file to **https** link of your infra-schema repository. \nGenerate and include PAT as HTTP auth credentials.\n\n```yaml\ninfraMgr:\n  git:\n    repository: https://github.com/th2-net/th2-infra-demo-configuration.git\n    httpAuthUsername: \"<token>\" \n    httpAuthPassword: \"<token>\" \n```\n\ninfra-mgr secret is still required.\n\n```shell\nkubectl -n service create secret generic infra-mgr --from-literal=infra-mgr=infra-mgr\n```\n\n### Using Git server internally in Kubernetes\n\n\nIf you have any restrictions to get access to any external repositories from the k8s cluster, Git service can be deployed according to the following instruction:\n\n*  Create PersistentVolume \"repos-volume\", example is presented in the `./example-values/persistence/pv.yaml`;\n*  Create configmap \"keys-repo\" from public part of key from point [Access for infra-mgr to the th2 infra-schema Git repository](#access-for-infra-mgr-to-the-th2-infra-schema-git-repository):\n\n```shell\nkubectl -n service create configmap keys-repo --from-file=authorized_keys=./infra-mgr-rsa.pub\n```\n*  Define configs for infra-git in `services.values.yaml`. \n*  Set `infraMgr.git.repository` value in the `service.values.yaml` file to **ssh** link of your repository, e.g:\n```yaml\ninfraMgr:\n  git:\n    repository: ssh://git@git-ssh/home/git/repo/<your_repo_name>.git\n```\n* After installation, you should initiate a new repository with the name defined at the previous step.\n\n\n## Cluster configuration\n\nOnce all the required software is installed on your th2 node, Apache Cassandra node, and operator box, and th2-infra repository is ready, you can start configuring the cluster.\n\n* Switch namespace to *service*:\n```\n$ kubectl config set-context --current --namespace=service\n```\n\n### Define Cassandra hostname\n* Set `cassandra.host` value for `cassandra` in the [service.values.yaml](https://github.com/th2-net/th2-infra/blob/v1.7.3/example-values/service.values.yaml) file. \n* It is also recommended specifying a name of Cassandra datacenter (it is `datacenter1` by default):\n\n```yaml\ncassandra:\n  internal: false\n  host: <cassandra-host>\n  cluster: \n    datacenter: datacenter1\n```\n\n### Define RabbitMQ Ingress parameters\nIf required, add the `rabbitmq.ingress.hostName` value into [service.values.yaml](https://github.com/th2-net/th2-infra/blob/v1.7.3/example-values/service.values.yaml) file. Otherwise, the RabbitMQ HTTP service will be available on the node IP address.\n\n### Define th2 Ingress parameters\nIf required, add `ingress.hostname` value into [service.values.yaml](https://github.com/th2-net/th2-infra/blob/v1.7.3/example-values/service.values.yaml) file. Otherwise, th2 HTTP services will be available on the node IP address.\n\n\n```yaml\ningress:\n  host: example.com\n```\n\nIn order to include Kubernetes address to configurations for external interactions, you can add option `infraOperator.config.k8sUrl`, which can be both an IP address or a domain name.\n\n```yaml\ninfraOperator:\n  config:\n    k8sUrl: \"<kubernetes-external-entrypoint>\"\n```\n\n### Create secret with th2 credentials\n\nCreate `secrets.yaml` in `./` folder (*do not commit into Git*). Example:\n```yaml\n# required only for images from a private registry, will be attached as the first PullSecret to deployments\n#productRegistry:\n#  username: user\n#  password: password\n#  name: private-registry-1.example.com # core components registry\n# required only for images from a private registry, will be attached as the second PullSecret to deployments\n#solutionRegistry:\n#  username: user\n#  password: password\n#  name: private-registry-2.example.com # components registry\n# required only for images from a private registry, will be attached as the third PullSecret to deployments\n#proprietaryRegistry:\n#  username: user\n#  password: password\n#  name: private-registry-3.example.com # components registry\ncassandra:\n# set credentials for existing Cassandra cluster\n  dbUser:\n    user: <user-name>\n    password: <password>\nrabbitmq:\n# set admin user credentials, it will be created during deployment\n  rabbitmqUsername: th2\n  rabbitmqPassword: rab-pass\n  # must be a random string\n  rabbitmqErlangCookie: cookie\n```\n\n## th2 deployment\n### Install NGINX Ingress Controller\n```shell\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm install -n service --version=3.31.0 ingress ingress-nginx/ingress-nginx -f ./ingress.values.yaml\n```\nCheck:\n```shell\n$ kubectl get pods\nNAME                                                READY   STATUS    RESTARTS   AGE\n........\ningress-ingress-nginx-controller-7979dcdd85-mw42w   1/1     Running   0          30s\n........\n```\n\n### Install th2-infra components in the service namespace\n```shell\nhelm repo add th2 https://th2-net.github.io\nhelm install -n service --version=<version> th2-infra th2/th2 -f ./service.values.yaml -f ./secrets.yaml\n```\n\n<notice note>\n\nReplace `<version>` with th2-infra release version you need. You can check versions [here](https://github.com/th2-net/th2-infra/releases)\n\n</notice>\n\nWait for all the pods in *service* namespace to be up and running. Once completed, proceed with [infra-schema configuration](https://github.com/th2-net/th2-infra-schema-demo/blob/master/README.md) to deploy th2 namespaces.\n\n\n## th2 infra links:\n- Kubernetes dashboard `http://your-host:30000/dashboard/`\n- Grafana `http://your-host:30000/grafana/`\n- th2-infra-editor `http://your-host:30000/editor/`\n- RabbitMQ `http://your-host:30000/rabbitmq/`\n- th2-reports `http://your-host:30000/your-namespace/`\n","fileInfo":{"path":"versions/1-7/getting-started/install-th2/3-th2.md"},"headings":[{"anchor":"#3-deploy-th2","value":"3. Deploy th2","depth":1},{"anchor":"#prerequisites","value":"Prerequisites","depth":2},{"anchor":"#download-infra-values","value":"Download infra values","depth":2},{"anchor":"#infrastructure-namespaces","value":"Infrastructure namespaces","depth":2},{"anchor":"#create-namespaces","value":"Create namespaces","depth":3},{"anchor":"#data-persistence","value":"Data persistence","depth":2},{"anchor":"#pv-for-read-components","value":"PV for read components","depth":3},{"anchor":"#monitoring-deployment","value":"Monitoring deployment","depth":2},{"anchor":"#access-for-infra-mgr-to-the-th2-infra-schema-git-repository","value":"Access for infra-mgr to the th2 infra-schema Git repository","depth":2},{"anchor":"#ssh-key","value":"SSH key","depth":3},{"anchor":"#personal-access-token","value":"Personal access token","depth":3},{"anchor":"#using-git-server-internally-in-kubernetes","value":"Using Git server internally in Kubernetes","depth":3},{"anchor":"#cluster-configuration","value":"Cluster configuration","depth":2},{"anchor":"#define-cassandra-hostname","value":"Define Cassandra hostname","depth":3},{"anchor":"#define-rabbitmq-ingress-parameters","value":"Define RabbitMQ Ingress parameters","depth":3},{"anchor":"#define-th2-ingress-parameters","value":"Define th2 Ingress parameters","depth":3},{"anchor":"#create-secret-with-th2-credentials","value":"Create secret with th2 credentials","depth":3},{"anchor":"#th2-deployment","value":"th2 deployment","depth":2},{"anchor":"#install-nginx-ingress-controller","value":"Install NGINX Ingress Controller","depth":3},{"anchor":"#install-th2-infra-components-in-the-service-namespace","value":"Install th2-infra components in the service namespace","depth":3},{"anchor":"#th2-infra-links","value":"th2 infra links:","depth":2}],"read_before":[],"continue_learning":[{"title":"Use th2","href":"../create-th2-env","icon":""}],"terms":[],"related":[],"hide_releases":null,"_githubRepository":null}},"context":{}}