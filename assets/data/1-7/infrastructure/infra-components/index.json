{"hash":"eb53be573f7641e44afd869d1bdfef529d471930","data":{"doc":{"title":"th2-infra components","inner_title":"","description":"th2-infra components\n\nThe th2-infra components are an important part of the th2 infrastructure. \nWhile the infra-schema describes a th2 environment configured for a particular testing use case, the other infra components provide control over such environments.","content":"\n# th2-infra components\n\nThe th2-infra components are an important part of the th2 infrastructure. \nWhile the infra-schema describes a th2 environment configured for a particular testing use case, the other infra components provide control over such environments. \n\n<!--more-->\n\nInfra components are an intermediate layer between the user and the Kubernetes cluster. \nThis layer changes the th2 environments in accordance with the state of the **infra-schema**.\n\n![](./infra-comp-1.png)\n\n## Components\n\nThere are 5 Infra components:\n\n1. **[th2-infra-schema](https://github.com/th2-net/th2-infra-schema-demo)** - a special repository that contains schema configurations, acting as a config files' storage that works via Git.\n2. **[th2-infra-mgr](https://github.com/th2-net/th2-infra-mgr)** - component that watches for the changes in the repositories and deploys the changed components to Kubernetes. \n3. **[th2-infra-operator](https://github.com/th2-net/th2-infra-operator)** - an implementation of Kubernetes custom resource controller.\n4. **[th2-infra-editor](https://github.com/th2-net/th2-infra-editor)** - a web GUI for schema control.\n5. **infra-repo** - an abstract chart used by Helm operator (the element is not shown on the diagram below).\n\n## Components interactions\n\n![img.png](./infra-comp-2.png)\n\n### Edit infra-schema\n\nYou have 2 ways to edit your **infra-schema**:\n\n1. Git-based - by committing the changes directly into your **infra-schema**.\n2. GUI-based - by interacting with **infra-editor** (a special Graphical User Interface in th2).\n\n### infra-editor and infra-mgr interaction\n\n\n**infra-editor** gets information on current state of **infra-schema** from **infra-mgr**, displays it for the user using web GUI, and allows them to configure environment via sending changes to **infra-mgr**.\n\n### Reading-editing infra-schema by infra-mgr\n\nThe **infra-mgr** monitors the state of the **infra-schema** repository and stores it in its cache.\nUsers can deploy their customized **infra-schemas** easily by using **infra-mgr**.\nAll a user has to do is pick one of four options provided in the infra-mgr config file. \nThis file is present with each **infra-schema**.\n\nAlso, **infra-mgr** can change the **infra-schema** repository.\n\n### infra-mgr and infra-operator interaction\n\nUsers can conveniently introduce changes to the cluster by editing <term term=\"Custom resource\">Custom resources</term> of the **infra-schema**.\nThe **infra-mgr** monitors the infra-schema repository for the changes and rolls out updated schemas to Kubernetes. \nThe **infra-operator** which monitors the cluster for changes to custom resources  configures the message/event routing in RabbitMQ as required.\nIt will also upload Helm releases for further configuration and deployment of th2 boxes in the cluster if requested.\n\n\n## Data transformation\n\nThe table below provides the mapping between the elements of a th2 **infra-schema**  and corresponding entities of a deployed Kubernetes cluster. \n\n| **th2-infra-schema** repository                                                       | Kubernetes cluster                                                             |\n|---------------------------------------------------------------------------------------|--------------------------------------------------------------------------------|\n| Git branch                                                                            | th2 environment (Kubernetes namespace + Cassandra keyspace + RabbitMQ VHost)   |\n| `Th2Box`, `Th2CoreBox`, `Th2Estore`, `Th2Mstore` <term term=\"Custom resource\"></term> | Kubernetes <term term=\"ConfigMap\"></term>, Kubernetes <term term=\"Pod\"></term> |\n| `Th2Link` <term term=\"Custom resource\"></term>                                        | Bindings in RabbitMQ                                                           |\n| `Th2Dictionary` <term term=\"Custom resource\"></term>                                  | Kubernetes <term term=\"ConfigMap\"></term> (saved in encoded format)            |\n\n## Scenarios \n\nAll the infra components are created to work together to transform the data representations provided by **infra-schema** into the actual implementation of the th2 environment.\n\nThe below scenarios outline typical ways to interact with infra components in th2.\n\n<!-- Plantuml code is ciphered inside link -->\n<!-- To see plantuml code, go to a link in browser and change '/png/' to '/uml/' in the path -->\n\n1. Create new schema using **infra-editor**  \n  \n\n```plantuml\n@startuml\ntitle Create new schema with th2-infra-editor\n\n[th2-infra-editor <&pencil>] as editor\n[th2-infra-mgr <&person>] as mgr\nfolder schema [\nth2-infra-schema\n]\nactor user\n\nuser -r-> editor: 1. Create New Schema\neditor --> mgr: 2. Create New Schema\nmgr -l-> schema: 3. New Branch from master\n@enduml\n```\n\n2. Create th2 environment from the **infra-schema** branch\n\n```plantuml\n@startuml\nleft to right direction\ntitle Create th2 environment from th2-infra-schema branch\n\n[th2-infra-mgr <&person>] as mgr\n[th2-infra-operator] as operator\n[helm-operator] as hoperator\nfolder \"th2-infra-schema\" as schema\ncontrol Kubernetes\ncontrol RabbitMQ\n\nmgr ~u~> schema : Watch for Changes\noperator ~d~> Kubernetes : Listen for CR updates\nhoperator ~u~> Kubernetes: Listem for HelmRelease updates\n\nschema .d.> mgr : 1. New Branch Event\nmgr --> Kubernetes : 2. Initialize Schema Namespace\nmgr --> Kubernetes : 3. Apply Schema CR's\nKubernetes .u.> operator: 4. CR update event\noperator --> RabbitMQ: 5. Create Vhost\noperator --> RabbitMQ: 6. Configure Bindings\noperator --> Kubernetes: 7. Update HelmRelease\nKubernetes ..> hoperator: 8. HelmRelease update\nhoperator --> Kubernetes: 9. Create Kubernetes Native Resources\n@enduml\n```\n\n3. Update th2 environment\n\n```plantuml\n@startuml\nleft to right direction\ntitle Update th2 environment\n\n[th2-infra-mgr <&person>] as mgr\n[th2-infra-operator] as operator\n[helm-operator] as hoperator\nfolder \"th2-infra-schema\" as schema\ncontrol Kubernetes\ncontrol RabbitMQ\n\nmgr ~u~> schema : Watch for Changes\nhoperator ~u~> Kubernetes: Listem for HelmRelease updates\noperator ~d~> Kubernetes : Listen for CR updates\n\nschema .d.> mgr : 1. New Commit Event\nmgr --> Kubernetes : 2. Update Schema CR's\nKubernetes .u.> operator: 3. CR's update event\noperator --> RabbitMQ: 4. Update Bindings\noperator --> Kubernetes: 5. Update HelmRelease\nKubernetes ..> hoperator: 6. HelmRelease update\nhoperator --> Kubernetes: 7. Update Kubernetes Native Resources\n@enduml\n```\n\n4. Delete th2 environment\n\n```plantuml\n@startuml\nleft to right direction\ntitle Delete th2 environment\n\n[th2-infra-mgr <&person>] as mgr\n[th2-infra-operator] as operator\n[helm-operator] as hoperator\nfolder \"th2-infra-schema\" as schema\ncontrol Kubernetes\ncontrol RabbitMQ\n\nmgr ~u~> schema : Watch for Changes\nhoperator ~u~> Kubernetes: Listem for HelmRelease updates\noperator ~d~> Kubernetes : Listen for CR updates\n\nschema .d.> mgr : 1. Delete Branch Event\nmgr --> Kubernetes : 2. Delete Schema CR's\nKubernetes .u.> operator: 3. CR Delete event\noperator --> RabbitMQ: 4. Delete Bindings\noperator --> RabbitMQ: 5. Delete Vhost\noperator --> Kubernetes: 6. Remove HelmRelease\nKubernetes ..> hoperator: 7. HelmRelease Remove event\nhoperator --> Kubernetes: 8. Remove Kubernetes Native Resources\nmgr --> Kubernetes: 9. Delete Schema Namespace\n@enduml\n```\n\n## Installation\n\n**th2 infra components**  are deployed as a single Helm release:\n \n```shell\nhelm repo add th2 https://th2-net.github.io\nhelm install -n service --version=<version> th2-infra th2/th2 -f configuration.yaml -f secrets.yaml\n```\n\n## Configuration\n\nConfigure the infra-components at initialization using their corresponding config files.\n\nA short configuration and a full configuration are provided below.\n\n### th2-infra configuration\n\nShort configuration:\n\n```yaml\ninfraMgr:\n  git:\n    repository: git@github.com:th2-net/th2-infra-demo-configuration.git\n\nrabbitmq:\n  prometheus:\n    operator:\n      enabled: false\n  persistentVolume:\n    enabled: true\n    storageClass: local-storage\n    size: 10Gi\n\ncassandra:\n  internal: false\n  host: <cassandra-host>\n```\n\n<spoiler title=\"Full configuration\">\n\nAll the provided values are default. \n\n```yaml\n# Image repositories and credentials to create pull secrets\nproductRegistry:\n  secret: th2-core\n  name:\n  username:\n  password:\n\nsolutionRegistry:\n  secret: th2-solution\n  registry:\n  username:\n  password:\n\ningress:\n  host:\n\nexternalRabbitMQHost:\n  host: localhost\n\ninfraEditor:\n  image:\n    repository: ghcr.io/th2-net/th2-infra-editor\n    tag: 1.0.65\n\ninfraRepo:\n  image:\n    repository: ghcr.io/th2-net/infra-repo\n    tag: 0.6.0\n\ninfraOperator:\n  prometheusConfiguration:\n    enabled: true\n  image:\n    repository: ghcr.io/th2-net/th2-infra-operator\n    tag: 3.2.8 \n  config:\n    chart:\n      # external mirror\n      # repository: https://th2-net.github.io\n      repository: http://infra-repo:8080\n      version: 0.6.0\n      name: infra-operator-tpl\n    namespacePrefixes:\n      - \"th2-\"\n    k8sUrl: \"<kubernetes-external-entrypoint>\"\n    rabbitMQManagement:\n      #      host: \"rabbitmq-discovery.service.svc.cluster.local\" - deprecated. host is taken from rabbitmq config\n      port: \"15672\"\n      username: \"th2\"\n      password: \"${RABBITMQ_PASS}\"\n      persistence: true\n      schemaPermissions:\n        configure: \"\"\n        read: \".*\"\n        write: \".*\"\n\ninfraMgr:\n  prometheusConfiguration:\n    enabled: true\n  image:\n    repository: ghcr.io/th2-net/th2-infra-mgr\n    tag: 1.2.9\n  git:\n    secretName: infra-mgr\n    privateKeyFileSecret: infra-mgr\n    secretMountPath: /home/service/keys\n    repository: git@github.com:th2-net/th2-demo-configuration.git\n    repositoryLocalCache: /home/service/repository\n    httpAuthUsername: \"\" #should be stored in secret th2-git-access-schemas\n    httpAuthPassword: \"\" #should be stored in secret th2-git-access-schemas\n  rabbitmq:\n    vHostPrefix: th2-\n    usernamePrefix: th2-user-\n    secret: rabbitmq\n    passwordLength: 24\n  cassandra:\n    keyspacePrefix: schema_\n    secret: cassandra\n  kubernetes:\n    namespacePrefix: \"th2-\" # must be not more than 5 symbols\n    ingress: ingress-rules\n    configMaps:\n      logging: logging-config-template\n      rabbitmq: rabbit-mq-app-config\n      rabbitmq-ext: rabbit-mq-external-app-config\n      cassandra: cradle\n      cassandra-ext: cradle-external\n      prometheus: prometheus-app-config\n    secrets:\n      - th2-core\n      - th2-solution\n      - th2-proprietary\n\n# If service not internal - ExternalName service will be created, credentials will be mapped to secrets / config maps\n# otherwise service will be deployed as a chart dependency\nrabbitmq:\n  internal: true\n  rabbitmqMemoryHighWatermark: 1024MB\n  #it is not required if the service internal\n  #  host: \"\"\n  fullnameOverride: rabbitmq\n  rabbitmqVhost: th2\n  rabbitmqUsername: th2\n  # will be generated if empty\n  rabbitmqPassword: \"\"\n  rabbitmqErlangCookie: \"\"\n  rabbitmqExchange: th2-exchange\n  replicaCount: 1\n  podAntiAffinity: hard\n  persistentVolume:\n    enabled: true\n    storageClass: local-storage\n    size: 10Gi\n  livenessProbe:\n    exec:\n      command:\n        - /bin/bash\n        - -ec\n        - rabbitmq-diagnostics -q check_running\n    initialDelaySeconds: 120\n    timeoutSeconds: 20\n    periodSeconds: 30\n    failureThreshold: 6\n    successThreshold: 1\n  readinessProbe:\n    exec:\n      command:\n        - /bin/bash\n        - -ec\n        - rabbitmq-diagnostics -q check_running\n    initialDelaySeconds: 10\n    timeoutSeconds: 20\n    periodSeconds: 30\n    failureThreshold: 3\n    successThreshold: 1\n  service:\n    type: \"NodePort\"\n    amqpNodePort: 32000\n  rabbitmqPrometheusPlugin:\n    enabled: true\n  prometheus:\n    exporter:\n      enabled: false\n    operator:\n      enabled: true\n      alerts:\n        enabled: true\n      serviceMonitor:\n        selector:\n          release: prometheus\n\n# If service not internal - ExternalName service will be created, credentials will be mapped to secrets / config maps\n# otherwise service will be deployed as a chart dependency\ncassandra:\n  internal: true\n  #it is not required if the service internal\n  #  host: \"\"\n  fullnameOverride: cassandra\n  cluster:\n    datacenter: dc1\n  dbUser:\n    user: th2\n    # will be generated if empty\n    password: \"\"\n  keyspace: cradle\n  persistence:\n    enabled: false\n    storageClass: local-storage\n    size: 50Gi\n```\n</spoiler>\n\n### Credentials for service integration\n\n```yaml\n# reguired only for images from a private registry, will be attached as the first PullSecret to deployments\n#productRegistry:\n#  username: user\n#  password: password\n#  name: private-registry-1.example.com # core components registry\n\n# reguired only for images from a private registry, will be attached as the second PullSecret to deployments\n#solutionRegistry:\n#  username: user\n#  password: password\n#  name: private-registry-2.example.com # components registry\n\n# reguired only for images from a private registry, will be attached as the third PullSecret to deployments\n#proprietaryRegistry:\n#  username: user\n#  password: password\n#  name: private-registry-3.example.com # components registry\n\ncassandra:\n# set credentials for existing Cassandra cluster\n  dbUser:\n    user: <user-name>\n    password: <password>\n\nrabbitmq:\n# set admin user credentials, it will be created during deployment\n  rabbitmqUsername: th2\n  rabbitmqPassword: rab-pass\n  # must be random string\n  rabbitmqErlangCookie: cookie\n```\n","fileInfo":{"path":"versions/1-7/infrastructure/infra-components/_index.md"},"headings":[{"anchor":"#th2-infra-components","value":"th2-infra components","depth":1},{"anchor":"#components","value":"Components","depth":2},{"anchor":"#components-interactions","value":"Components interactions","depth":2},{"anchor":"#edit-infra-schema","value":"Edit infra-schema","depth":3},{"anchor":"#infra-editor-and-infra-mgr-interaction","value":"infra-editor and infra-mgr interaction","depth":3},{"anchor":"#reading-editing-infra-schema-by-infra-mgr","value":"Reading-editing infra-schema by infra-mgr","depth":3},{"anchor":"#infra-mgr-and-infra-operator-interaction","value":"infra-mgr and infra-operator interaction","depth":3},{"anchor":"#data-transformation","value":"Data transformation","depth":2},{"anchor":"#scenarios","value":"Scenarios","depth":2},{"anchor":"#installation","value":"Installation","depth":2},{"anchor":"#configuration","value":"Configuration","depth":2},{"anchor":"#th2-infra-configuration","value":"th2-infra configuration","depth":3},{"anchor":"#credentials-for-service-integration","value":"Credentials for service integration","depth":3}],"read_before":[],"continue_learning":[],"terms":[{"id":"Custom resource","title":"Custom resource","content":"<p><em>Custom resources</em> are extensions of the Kubernetes API. It is not necessarily available in a default Kubernetes installation. It represents a customization of a particular Kubernetes installation. However, many core Kubernetes functions are now built using CRs, making Kubernetes more modular.</p>\n<p>You can find more information about <em>Custom resources</em> <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n"},{"id":"ConfigMap","title":"ConfigMap","content":"<p><em>ConfigMap</em> is an API object used to store non-confidential data in key-value pairs. Pods can consume <em>ConfigMaps</em> as environment variables, command-line arguments, or as configuration files in a volume. </p>\n<p><a href=\"https://kubernetes.io/docs/concepts/configuration/configmap/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">More</a></p>\n"},{"id":"Pod","title":"Pod","content":"<p><em>Pods</em> are the smallest deployable units of computing that you can create and manage in Kubernetes.</p>\n<p><a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">More</a></p>\n"}],"related":[],"hide_releases":null,"_githubRepository":null}},"context":{}}