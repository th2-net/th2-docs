{"hash":"2c39d0f6c4e74e25e9cd96bd966a35a86b99cf6b","data":{"doc":{"__typename":"GitOpsPage","title":"Pins","inner_title":"","content":"\n# Pins\n\nEach th2 box has a number of pins. \nPins are used by a box (available only for `Th2Box` and `Th2CoreBox`) to send/receive messages, or to execute gRPC commands.\n\n## Configuration\n\nThe configuration fields available for a pin are listed below.\n\n- `name` (mandatory) - reflects a pin’s main purpose and is used in the configuration file describing corresponding links;\n- `connection-type` (mandatory) - sets the connection type used by the pin (starting from th2-infra v1.6.0, the options are `mq`, `grpc-client` or `grpc-server`; for earlier versions, possible values are `mq` or `grpc`)\n- `attributes` (optional) - define the type of message streams which go through this particular pin;\n- `settings` (optional) – the section specifies two settings determining the strategy to be used to declare queues in RabbitMQ: `storageOnDemand` and `queueLength`;\n- `filters` (optional and available only for `mq` connection type) - the section describes what messages/metadata can go through this particular pin. Filters can be applied to `metadata` or `message` and contain the following parameters: `field-name`, `expected-value`, `operation`.\n- `service-class` – should be specified if the pin is a gRPC-client (in other words, if it is specified as the “from” component in a config for any link);\n- `service-classes` – should be specified if the pin is a gRPC-server (in other words, if the pin is specified as the “to” component in a config for any link).\n- `strategy` - defines the strategy of requests. Possible values: `filter` or `robin`. *Default*: `robin`.\n\nConfiguration example:\n\n```yaml\npins: [object-array] (optional, available only for Th2Box and Th2CoreBox)\n    - name: [string] \n      connection-type: [enum] \n      attributes: [string array] \n        - atr1\n        - atr2\n      settings: [object]\n        storageOnDemand: [enum boolean]\n        queueLength: [string] \n      filters:\n        - metadata:\n            - field-name: [string] \n              expected-value: [string] \n              operation: [enum] \n          message: \n            - field-name: [string] \n              expected-value: [string] \n              operation: [enum]\n      service-class: [string, used if pin is grpc-client] *\n      service-classes: [string-array, used if pin is grpc-server] *\n        - com.exactpro.th2.box.grpc.BoxService\n        - com.exactpro.th2.otherbox.grpc.OtherBoxService\n      strategy: [string, default: 'robin']\n```\n\nIt is possible to specify several pins in one configuration. \nIn the example config file below, a box has two pins: `in` and `in_raw`.\n\n```yaml\n- name: in\n  connection-type: mq\n  attributes:\n    - first\n    - parsed\n    - subscribe\n    - store\n- name: in_raw\n  connection-type: mq\n  attributes:\n    - first\n    - raw\n    - subscribe\n    - store\n```\n### Filters section\n\nA pin can have a `filters` section. \nFilters can have `metadata` or `message` fields. \nIn this case, the metadata/message is sent or received via this particular pin only if it complies with the filter parameter.\nFilter options available:\n- `EQUAL`;\n- `NOT_EQUAL`;\n- `EMPTY`;\n- `NOT_EMPTY`;\n- `WILDCARD`.\n\nFor example:\n\n```yaml\n- name: fix_to_send\n  connection-type: mq\n  attributes: [send, parsed, subscribe]\n  filters:\n    - metadata:\n        - field-name: session_alias\n          expected-value: conn1_session_alias\n          operation: EQUAL\n    - message: \n        - field-name: field_name\n          expected-value: value\n          operation: NOT_EQUAL\n```\n\n\n### Settings section for MQ connection type\n\nMQ pins transfer messages through RabbitMQ - queue manager used by th2.\nIf `connection-type: mq` we can specify `settings` section. Under this section we can specify two settings that configure which strategy will be used while declaring queues in RabbitMQ.\n- `storageOnDemand` (optional) - option which defines an overflow strategy which will be drop-head if set to `false`. *Default*: `true`.\n- `queueLength` (optional) - the length of the queue created by the operator. *Default*: 1000 msg.  \n  Important: `queueLength` isn't used if `storageOnDemand` is set to `true`.\n\n<notice note> Please note that if an external box has a pin with `subscribe` attribute and exists a box in Kubernetes that publishes on your pin (e.g. **act** has `from_codec` pin related to the queue in rabbitMQ and receives messages from **codec**), then if you close your external application - the messages will accumulate in the queue and can fill the cluster memory. \nTo prevent that, please configure the queue limit on your external box pins. </notice>\n\nFor example:\n\n```yaml\npins:\n    - name: to_send\n      connection-type: mq\n      attributes:\n        - subscribe\n        - send\n        - raw\n      settings:\n        storageOnDemand: false\n        queueLength: 1000\n```\n### Settings section for gRPC connection type\n\ngRPC pins use gRPC technology for synchronous client-server API calls between different boxes in the cluster.\n\nLogically, a gRPC pin can stand for server endpoint and client endpoint. \nFor these cases, th2 specification contains corresponding connection types:\n- `connection-type: grpc-server`\n- `connection-type: grpc-client`\n\n<notice info>\n\n`grpc-client` pins affect the box's config map only. Technically, you can connect to gRPC server without created client pins, but it is convenient to have generated endpoints configuration.\n\n</notice>\n\nIf `connection-type` is `grpc-server`, you should specify `service-classes` as array; if `grpc-client` - `service-class` as string.\n\n```yaml\n  pins:\n    - name: server\n      connection-type: grpc-server\n      service-classes:\n        - com.exactpro.th2.act.grpc.ActService\n        - com.exactpro.th2.box.grpc.BoxService\n    - name: to_check1\n      connection-type: grpc-client\n      service-class: com.exactpro.th2.check1.grpc.Check1Service\n```\n<notice note> \n\nImportant note about `service-classes` and `service-class` is that they must be compatible for link to be applied. For example, if the client has a service class `com.exactpro.th2.box.grpc.BoxService` then the server should contain the same service class in its list.\n\n</notice>\n\n<notice note>\n\nIf you want to provide access to gRPC server from external boxes, it is required to create an endpoint in `extended-settings.service.endpoints` option in box configuration.\n\n</notice>\n\nTo create an endpoint a box should have:\n\n- `extended-settings.service.enabled`: `true`;\n- `extended-settings.service.type`: type of a native Kubernetes service, which you want to use;\n\nIn endpoint options:\n\n- `name` - name of endpoint unique for a box;\n- `targetPort` - Docker container port for listening;\n- `nodePort` - Kubernetes node port for listening;\n\nExample of extended settings:\n\n```yaml\nextended-settings:\n  service:\n    enabled: true\n    type: NodePort\n    endpoints:\n      - name: grpc\n        targetPort: 8080\n        nodePort: 31179\n```\n## Attributes section\n\nAttributes define the behavior of the pins and describe what message stream goes through a particular pin. \nThey are specific for each box.\n\nThe set of attributes varies from one th2 component to another. \nEach th2 component can have its own mandatory or optional attributes.\n\nIf you are defining a pin in which data will be published by the current box, you must specify the `publish` attribute; if the pin is supposed to receive data from another box, then you can optionally specify `subscribe`. \nAlthough the `subscribe` attribute is optional, it’s still recommended to specify it, to maintain consistency. \nIf the pin is accepting data and the `subscribe` attribute is not specified, then by default the pin will be considered as `subscribe` anyway. \nYou cannot apply both attributes to one pin at the same time. \nA pin can have either a `publish` or a `subscribe` attribute.\n\nBelow is the list of possible attributes for pins. \nThey are grouped in such a way that in most cases only one option of two is used for a pin.\n\n### MQ action attributes:\n\n|Attribute|Description|Usage|\n|---|---|---|\n|`publish`|Pin publishes messages via MQ.|Used by any of the th2 components <br> that publish messages via MQ, for example: <br> conn to codec; codec to act/check; act to conn; <br> conn to estore.|\n|`subscribe`|Pin subscribes to messages via MQ. <br> If `publish` and `subscribe` attributes <br> are both not specified - pin will act as `subscribe`.|Used by any of the th2 components which get <br> messages via MQ, for example:conn to codec; <br> codec to act/check; act to conn; conn to estore.|\n\n### th2-conn message direction attributes:\n|Attribute|Description|Usage|\n|---|---|---|\n|`first`|Pin transfers messages that are sent <br> from a server to a client.|Used by the **conn** component to retransmit dialog <br> between the **conn** and remote system into the th2.|\n|`second`|Pin transfers messages that are sent <br> from a client to a server.|Used by the **conn** component to retransmit dialog <br> between the **conn** and remote system into the th2.|\n\n### th2-codec message type attributes:\nThere are two types of **codec**: `decoder` and `encoder`. \nEvery type of **codec** connection has `subscribe` and `publish` pins. \nThe first one is used to receive messages to decode/encode while the second one is used to send decoded/encoded messages further. \n**codec** works with either `parsed` or `raw` messages.\n\n|Attribute|Description| Usage                                                                                                                                                                                                                                       |\n|---|---|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|`raw`|Pin transfers raw message batches.| **codec** publishes raw messages after encoding and <br> subscribes to raw messages for decoding.                                                                                                                                           |\n|`parsed`|Pin transfers parsed message batches.| Can be used by different th2 components. E.g., **codec** <br> publishes parsed messages after decoding and subscribes <br> to parsed messages for encoding. <br> **act**, **check_** **script** components work with this type of messages. |\n\n### th2-codec message direction attributes:\n|Attribute|Description|Usage|\n|---|---|---|\n|`decoder_in`|Describes input pin for decoder codec <br> (transforms protocol message into human-readable).|**codec**|\n|`decoder_out`|Describes output pin for decoder codec <br> (transforms protocol message into human-readable).|**codec**|\n|`encoder_in`|Describes input pin for encoder codec <br> (transforms human-readable message to protocol message).|**codec**|\n|`encoder_out`|Describes output pin for encoder codec <br> (transforms human-readable message to protocol message).|**codec**|\n\n### Stream and general codec pins:\n\nPlease note that there are also `general_decoder_in`, `general_decoder_out`, `general_encoder_in`, `general_encoder_out` attributes. They can be used by some of the th2 components and function as the stream attributes (without `general_`) . `general_` means that listening to this connection will be on demand, while stream connection is always active.\n\n\n### Non-mutually exclusive attributes:\n|Attribute| Description                                                                                   | Usage                                                                                                                  |\n|---|-----------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------|\n|`send`| Pin transfers event batches.                                                                  | Used by any box that publishes events. **estore** <br> consumes this type of messages.                                 |\n|`event`| Indicates that the messages that come into this pin <br> will be stored in Cradle.            | Used by pins that produce data to the th2, <br> for example, **conn**, **read**, this attribute <br> should be marked. |\n|`store`| Special attribute for the **conn** pin to receive data <br> from **act** or other components. | **th2-conn**                                                                                                           |\n","fileInfo":{"path":"infrastructure/th2-infra-schema/pins.md"},"headings":[{"anchor":"#pins","value":"Pins","depth":1},{"anchor":"#configuration","value":"Configuration","depth":2},{"anchor":"#filters-section","value":"Filters section","depth":3},{"anchor":"#settings-section-for-mq-connection-type","value":"Settings section for MQ connection type","depth":3},{"anchor":"#settings-section-for-grpc-connection-type","value":"Settings section for gRPC connection type","depth":3},{"anchor":"#attributes-section","value":"Attributes section","depth":2},{"anchor":"#mq-action-attributes","value":"MQ action attributes:","depth":3},{"anchor":"#th2-conn-message-direction-attributes","value":"th2-conn message direction attributes:","depth":3},{"anchor":"#th2-codec-message-type-attributes","value":"th2-codec message type attributes:","depth":3},{"anchor":"#th2-codec-message-direction-attributes","value":"th2-codec message direction attributes:","depth":3},{"anchor":"#stream-and-general-codec-pins","value":"Stream and general codec pins:","depth":3},{"anchor":"#non-mutually-exclusive-attributes","value":"Non-mutually exclusive attributes:","depth":3}],"read_before":[],"continue_learning":[],"terms":[],"related":[]}},"context":{}}