{"hash":"ed0a5a389d3618f0823526ee1d1166b55f4800f5","data":{"doc":{"__typename":"ModulePage","title":"Overview ","description":"","content":"\n# Overview \n\nThe **codec** is a component responsible for transforming <term term='message'>messages</term> from human-readable format into a format of a corresponding protocol and vice versa. \nIt contains the main logic for encoding and decoding messages. \nThe **codec** usually uses <term term='dictionary'>dictionary</term> to decode and encode messages. \nDictionaries contain message structures, fields and values that **codec** can decode. \n\n## Encoding\nDuring encoding, **codec** replaces each parsed message of the supported protocols in a message group with a raw one, by encoding parsed message content.\n\nNOTE: **codec** can merge content of subsequent raw messages into a resulting raw message (e.g. when a **codec** encodes only a transport layer and its payload is already encoded).\n\n\n## Decoding\nDuring decoding **codec** must replace each raw message in a message group with a parsed one by decoding raw message content. \nIf an exception was thrown, all raw messages will be replaced with `th2-codec-error` parsed messages.\n\nNOTE: **codec** can replace a raw message with a parsed message followed by several raw messages (e.g. when a **codec** decodes only a transport layer it can produce a parsed message for the transport layer and several raw messages for its payload).\n\nThe schema below describes encoding/decoding processes. \n\n![](./img/codec_inside_processes.png)\n\n- `raw` - <term term='pin'>pin</term> configuration item, message passing through this pin for processing is in a machine-readable format, ready to be sent or received via according protocol or being decoded.\n\n- `parsed` - pin configuration item, message passing through this pin for processing is in a human-readable format, used in th2.\n\n- `encode` - pin configuration item, message passing through this pin will be translated from parsed to raw.\n\n- `decode` - pin configuration item, message passing through this pin will be translated from raw to parsed.\n\n\nExample of a raw message (FIX protocol):\n```\n8=FIXT.1.19=6835=034=159049=fix-client156=fix-server152=20220608-13:14:37.58110=043\n```\n\nExample of a parsed message (FIX protocol):\n\n```json\n{\n  \"metadata\": {\n    \"id\": {\n      \"connectionId\": {\n        \"sessionAlias\": \"fix-server1\"\n      },\n      \"sequence\": \"1653493560372614018\",\n      \"subsequence\": [\n        1\n      ]\n    },\n    \"timestamp\": \"2022-06-08T13:14:37.582Z\",\n    \"messageType\": \"Heartbeat\",\n    \"protocol\": \"FIX\"\n  },\n  \"fields\": {\n    \"trailer\": {\n      \"messageValue\": {\n        \"fields\": {\n          \"CheckSum\": {\n            \"simpleValue\": \"043\"\n          }\n        }\n      }\n    },\n    \"header\": {\n      \"messageValue\": {\n        \"fields\": {\n          \"BeginString\": {\n            \"simpleValue\": \"FIXT.1.1\"\n          },\n          \"SenderCompID\": {\n            \"simpleValue\": \"fix-client1\"\n          },\n          \"SendingTime\": {\n            \"simpleValue\": \"2022-06-08T13:14:37.581\"\n          },\n          \"TargetCompID\": {\n            \"simpleValue\": \"fix-server1\"\n          },\n          \"MsgType\": {\n            \"simpleValue\": \"0\"\n          },\n          \"MsgSeqNum\": {\n            \"simpleValue\": \"1590\"\n          },\n          \"BodyLength\": {\n            \"simpleValue\": \"68\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Functions\n\nThe **codec** component handles message flows between components such as **conn**, **act**, **check1**, **read** and other. \nOn the scheme below you can see an example of interaction with other th2 components.\n\n![](./img/codec_interaction_with_other_components.png)\n\nThe **codec** component has eight pins - four for the stream, and four general ones. \nFunctionality of the stream and the general pins is the same. \nA common system setup uses two data flows: 1) to and from the system, and 2) to and from data provider. \nMessages from these flows cannot be mixed. \nOne way to avoid this intersection is to use two instances of a component with four pins. \nAnother option is to configure eight pins â€“ this allows the user to decrease the amount of required settings in **infra-schema** as well as resource utilization of the resulting system. \nGeneral pins are used by the data-provider component, other components are usually connected to the stream pins.\n\n### Why do we need a chain of codecs?\n\nIt is a very common case when the messages you send or receive from the system have the following structure: a transport layer protocol and a payload wrapped into the transport layer. \nThe payload can be any other protocol (even another transport protocol and a different payload wrapped into it). \nAlso, sometimes different systems use the same transport protocol but with the different payload wrapped into it (e.g. HTTP + JSON, HTTP + FIX).\n\nIn case you need to encode/decode a message but do not have a single **codec** for such case, you can reuse already implemented **codecs** by joining them into a chain of **codecs**. It is also recommended for the **codec** to work only with a single protocol.  \nFor example, you have HTTP, JSON and XML **codec**. \nYou can join them together for decoding XML over HTTP or JSON over HTTP.\n\nIf the **codec** component gets a message that does not match an expected format (a raw message of corresponding protocol to `in_codec_decode` pin and a parsed message to `in_codec_encode` pin) it will be sent through the corresponding out pins without changes.\n","fileInfo":{"path":"codec/overview.md"},"headings":[{"anchor":"#overview","value":"Overview","depth":1},{"anchor":"#encoding","value":"Encoding","depth":2},{"anchor":"#decoding","value":"Decoding","depth":2},{"anchor":"#functions","value":"Functions","depth":2},{"anchor":"#why-do-we-need-a-chain-of-codecs","value":"Why do we need a chain of codecs?","depth":3}],"terms":[{"id":"message","title":"message","content":"<p>is the unit of transferring data that goes in or out of th2, and circulates inside th2.</p>\n"},{"id":"dictionary","title":"dictionary","content":"<p>is an entity which contains descriptions of application level protocol messages used in System Under Test (SUT). Dictionaries have a unified form and provide human-readable format for th2 users. </p>\n"},{"id":"pin","title":"pin","content":"<p>used by a box to connect th2 microservices between each other to send/receive messages, or to execute gRPC commands.</p>\n<p><a href=\"/deploy/infrastructure/th2-infra-schema/pins\">More</a></p>\n<!--TODO: make more flexible link (avoid mentioning version straight)-->\n"}],"meta":{"contentTreeJSON":"[{\"title\":\"codec\",\"path\":\"/modules/codec/\",\"weight\":-100,\"followPath\":\"/modules/codec/overview/\",\"children\":[{\"title\":\"Overview \",\"path\":\"/modules/codec/overview/\",\"weight\":0,\"followPath\":\"/modules/codec/overview/\",\"children\":[]},{\"title\":\"Repositories\",\"path\":\"/modules/codec/repositories/\",\"weight\":5,\"followPath\":\"/modules/codec/repositories/\",\"children\":[]},{\"title\":\"Configuration\",\"path\":\"/modules/codec/config/\",\"weight\":10,\"followPath\":\"/modules/codec/config/\",\"children\":[]},{\"title\":\"Usage\",\"path\":\"/modules/codec/usage/\",\"weight\":20,\"followPath\":\"/modules/codec/usage/\",\"children\":[]}]}]","module_name":"codec","main_path":"/modules/codec/"}}},"context":{}}