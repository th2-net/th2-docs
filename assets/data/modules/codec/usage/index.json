{"hash":"2c39d0f6c4e74e25e9cd96bd966a35a86b99cf6b","data":{"doc":{"__typename":"ModulePage","title":"Usage","description":"","content":"\n# Usage\n\nTo implement a **codec** using this library you need to:\n\n1. add the following repositories into `build.gradle`:\n\n```groovy\nmaven {\n    url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'\n}\n\nmaven {\n    url 'https://s01.oss.sonatype.org/content/repositories/releases/'\n}\n```\n\n2. add dependency on `com.exactpro.th2:codec:4.6.0` into `build.gradle`\n\n3. set main class to `com.exactpro.th2.codec.MainKt`\n\nThis is usually done by using Gradle application plugin where you can set the main class like this:\n\n```groovy\napplication {\n   mainClassName 'com.exactpro.th2.codec.MainKt'\n}\n```\n\n4. implement `codec` itself by implementing IPipelineCodec interface:\n\n```groovy\ninterface IPipelineCodec : AutoCloseable {\n    fun encode(messageGroup: MessageGroup): MessageGroup = TODO(\"encode(messageGroup) method is not implemented\")\n    fun encode(messageGroup: MessageGroup, context: IReportingContext): MessageGroup = encode(messageGroup)\n    fun decode(messageGroup: MessageGroup): MessageGroup = TODO(\"decode(messageGroup) method is not implemented\")\n    fun decode(messageGroup: MessageGroup, context: IReportingContext): MessageGroup = decode(messageGroup)\n    override fun close() {}\n}\n```\n\n5. implement a factory for it, using the IPipelineCodecFactory interface:\n```groovy\ninterface IPipelineCodecFactory : AutoCloseable {\n    val protocols: Set<String>\n    val settingsClass: Class<out IPipelineCodecSettings>\n    fun init(dictionary: InputStream): Unit = TODO(\"not implemented\")\n    fun init(pipelineCodecContext: IPipelineCodecContext): Unit = pipelineCodecContext[DictionaryType.MAIN].use(::init)\n    fun create(settings: IPipelineCodecSettings? = null): IPipelineCodec\n    override fun close() {}\n}\n```\n**NOTE**: both init methods have default implementations.\nOne of them must be overridden in your factory implementation.\nIf your **codec** needs the MAIN dictionary, only you can override the `init(dictionary: InputStream)` method.\nOtherwise, you should override the `init(pipelineCodecContext: IPipelineCodecContext)` method.\n\n**IMPORTANT**: implementation should be loadable via Java's built-in service loader.\n\n6. That's it! Your **codec** is now complete.\n","fileInfo":{"path":"codec/usage.md"},"headings":[{"anchor":"#usage","value":"Usage","depth":1}],"terms":[],"meta":{"contentTreeJSON":"[{\"title\":\"codec\",\"path\":\"/modules/codec/\",\"weight\":-100,\"followPath\":\"/modules/codec/overview/\",\"children\":[{\"title\":\"Overview \",\"path\":\"/modules/codec/overview/\",\"weight\":0,\"followPath\":\"/modules/codec/overview/\",\"children\":[]},{\"title\":\"Repositories\",\"path\":\"/modules/codec/repositories/\",\"weight\":5,\"followPath\":\"/modules/codec/repositories/\",\"children\":[]},{\"title\":\"Configuration\",\"path\":\"/modules/codec/config/\",\"weight\":10,\"followPath\":\"/modules/codec/config/\",\"children\":[]},{\"title\":\"Usage\",\"path\":\"/modules/codec/usage/\",\"weight\":20,\"followPath\":\"/modules/codec/usage/\",\"children\":[]}]}]","module_name":"codec","main_path":"/modules/codec/"}}},"context":{}}