{"hash":"ed0a5a389d3618f0823526ee1d1166b55f4800f5","data":{"doc":{"__typename":"ModulePage","title":"Configuration","description":"","content":"\n# Configuration\n\n## Configuration parameters\n\nConfig file includes the following parameters:\n\n- `apiVersion` - API Kubernetes version used to create an object, the only available value - `th2.exactpro.com/v1`.\n\n- `kind`- kind of the created object, possible values - `Th2Box`, `Th2CoreBox`, `Th2Estore`, `Th2Mstore`, `Th2Dictionary`.\n\n- `metadata` (name, UID and optional field namespace) - should be equal to the file name without extension.\n\n- `spec` - required object configuration. This seciton contains `image-name` and `image-version` (including versions), `type`, `custom-config` (component-specific set of parameters), `pins` (to communicate with other boxes).\n\n- `extended-settings: service` - here we specify whether the object is available for other components, envVariables (environment variables for pod deployment), resources (amount of resources available for a Pod), etc.\n\nThe **codec** settings can be specified in `codecSettings` field of `custom-config`.\n\nFor example:\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  custom-config:\n    codecSettings:\n      messageTypeDetection: BY_INNER_FIELD\n      messageTypeField: \"messageType\"\n      rejectUnexpectedFields: true\n      treatSimpleValuesAsStrings: false\n```\n\n### Required pins and links\nThe **codec** has four types of pins: stream encode, stream decode, general encode, general decode.\n\n- _stream encode / decode_ pins are used for all testing activities performed with th2; **act**, **conn**, **sim**, **recon**, **bookchecker** microservices interact with **codec** through the _stream encode / decode_ pins.\n\n- _general encode / decode_ pins work on demand; those pins are mainly used for the th2 report UI: in order to show messages stored in Cassandra to the end user, **report-data-viewer** requests these messages from **rpt-data-provider** via **codec**.\n\nCodec never mixes messages from the _stream_ and the _general_ pins.\n\n<notice info>\n\nSEE ALSO: [stream and general pins description](/deploy/infrastructure/th2-infra-schema/pins/#stream-and-general-codec-pins)\n\n</notice>\n\nPins are a part of the main th2 concept.\nThey describe what are the inputs and outputs of a box.\nYou can read more about them [here](/deploy/infrastructure/th2-infra-schema/pins/).\n\nEvery **codec** operation is associated with 2 pins - `subscribe` and `publish`.\nThe first one is used to receive messages to decode/encode, while the second one is used to send decoded/encoded messages further.\n\n**Typical codec has the following pins**:\n\n- Pin for the _stream encoding_ input: `encoder_in` `parsed` `subscribe`\n\n- Pin for the _stream encoding_ output: `encoder_out` `raw` `publish`\n\n- Pin for the _general encoding_ input: `general_encoder_in` `parsed` `subscribe`\n\n- Pin for the _general encoding_ output: `general_encoder_out` `raw` `publish`\n\n- Pin for the _stream decoding_ input: `decoder_in` `raw` `subscribe`\n\n- Pin for the _stream decoding_ output: `decoder_out` `parsed` `publish`\n\n- Pin for the _general decoding_ input: `general_decoder_in` `raw` `subscribe`\n\n- Pin for the _general decoding_ output: `general_decoder_out` `parsed` `publish`\n\n### Configuration example\n\nAPI Kubernetes documentation contains specification format for any in-built Kubernetes object. th2-specific custom resources can be found in a Readme file of the component repository.\n\n- `name` in metadata must be filled in as a box name.\n\n- `image-name` must contain a <term term='link'>link</term> to the image of **codec** on your project (preferably the last version). For one project you can have more than one **codec** for the same protocol.\n\n- `image-version` should be filled with image tag (version of image in your projectâ€™s **codec**).\n\n- `type` specifies the type of component in th2.\n\n- `logFile` - this field is not mandatory and is only filled out in case of the user requiring log information on a very detailed level.\n\n- In `extended-settings.resources`, the `limits` value must be greater than the value of `requests`.\n\n- `service` parameter: to make this component available to other th2 boxes, set `service.enabled` to `true`.\n\nThis configuration is a general way for deploying components in th2.\nIt contains box configuration, pins' descriptions and other common parameters for a box.\n\nYou can configure a specific implementation of **codec** using the `codecSettings` section (Exception: for **codec-sailfish-...**, use `codecParameters` instead of `codecSettings`).\n\nExtended example of the **codec** configuration:\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  custom-config:\n    codecSettings:\n      parameter1: value\n      parameter2:\n        - value1\n        - value2\n  pins:\n    # encoder\n    - name: in_codec_encode\n      connection-type: mq\n      attributes: [ 'encoder_in', 'parsed', 'subscribe' ]\n    - name: out_codec_encode\n      connection-type: mq\n      attributes: [ 'encoder_out', 'raw', 'publish' ]\n    # decoder\n    - name: in_codec_decode\n      connection-type: mq\n      attributes: ['decoder_in', 'raw', 'subscribe']\n    - name: out_codec_decode\n      connection-type: mq\n      attributes: ['decoder_out', 'parsed', 'publish']\n    # encoder general (technical)\n    - name: in_codec_general_encode\n      connection-type: mq\n      attributes: ['general_encoder_in', 'parsed', 'subscribe']\n    - name: out_codec_general_encode\n      connection-type: mq\n      attributes: ['general_encoder_out', 'raw', 'publish']\n    # decoder general (technical)\n    - name: in_codec_general_decode\n      connection-type: mq\n      attributes: ['general_decoder_in', 'raw', 'subscribe']\n    - name: out_codec_general_decode\n      connection-type: mq\n      attributes: ['general_decoder_out', 'parsed', 'publish']\n```\n\n## Codec-related links\nSchema API allows configuring routing streams of the messages via links between the connections and the filters on pins.\nLet's consider some examples of routing in a **codec** box.\n\n\n### Split on 'publish' pins\nTo split a big source data stream into different pins by session alias, consider declaring multiple pins with attributes `['decoder_out', 'parsed', 'publish']` and filters instead of a common pin or in addition to it.\nEvery decoded message will be directed to all declared pins and will be sent to MQ only if it passes the filter.\n\n```yaml\napiVersion: th2.exactpro.com/v1\nkind: Th2Box\nmetadata:\n  name: codec\nspec:\n  pins:\n    # decoder\n    - name: out_codec_decode_first_session_alias\n      connection-type: mq\n      attributes: ['decoder_out', 'parsed', 'publish']\n      filters:\n        - metadata:\n            - field-name: session_alias\n              expected-value: first_session_alias\n              operation: EQUAL\n    - name: out_codec_decode_secon_session_alias\n      connection-type: mq\n      attributes: ['decoder_out', 'parsed', 'publish']\n      filters:\n        - metadata:\n            - field-name: session_alias\n              expected-value: second_session_alias\n              operation: EQUAL\n```\n\nThe filtering can also be applied for pins with a `subscribe` attribute.\n\n## Links config\nThe main link for a typical **codec** instance is a dictionary link.\nA linked dictionary serves as a reference for validations performed by a **codec** instance.\n\n\nExample:\n\n```yaml\n##### dictionary-links.yml #####\napiVersion: th2.exactpro.com/v1\nkind: Th2Link\nmetadata:\n  name: dictionary-links\nspec:\n  dictionaries-relation:\n  - name: codec-fix-sell-dictionary\n    box: codec-fix-sell\n    dictionary:\n      name: fix-sell\n      type: MAIN\n```\n### Connectivity links\nFunctionally, **codec** is a regular th2 box that communicates with other boxes via pins and links.\nTo configure the connections, use a template on the [Links](/deploy/infrastructure/th2-infra-schema/links/#boxes-links) page.\n\n\n\n### Report Data Provider link(-s)\nFor messages passing through **codec** to be displayed in Report UI, **codec** should be linked to **rpt-data-provider** in the following way:\n\nDedicated to desired **codec**, **rpt-data-provider** pin should be linked to `in_codec_general_decode` **codec** pin.\n\n`out_codec_general_decode` **codec** pin should be linked to **rpt-data-provider** pre-configured dedicated pin for particular **codec**.\n\n\n```yaml\n##### from-codec-links.yml #####\napiVersion: th2.exactpro.com/v1\nkind: Th2Link\nmetadata:\n  name: from-codec-links\nspec:\n  boxes-relation:\n    router-mq:\n    - name: provider-to-codec-fix-sell\n      from:\n        box: rpt-data-provider\n        pin: to_codec-fix-sell\n      to:\n        box: codec-fix-sell\n        pin: in_codec_general_decode\n    - name: codec-fix-sell-to-provider\n      from:\n        box: codec-fix-sell\n        pin: out_codec_general_decode\n      to:\n        box: rpt-data-provider\n        pin: from_codec-fix-sell\n```\n","fileInfo":{"path":"codec/config.md"},"headings":[{"anchor":"#configuration","value":"Configuration","depth":1},{"anchor":"#configuration-parameters","value":"Configuration parameters","depth":2},{"anchor":"#required-pins-and-links","value":"Required pins and links","depth":3},{"anchor":"#configuration-example","value":"Configuration example","depth":3},{"anchor":"#codec-related-links","value":"Codec-related links","depth":2},{"anchor":"#split-on-publish-pins","value":"Split on 'publish' pins","depth":3},{"anchor":"#links-config","value":"Links config","depth":2},{"anchor":"#connectivity-links","value":"Connectivity links","depth":3},{"anchor":"#report-data-provider-link-s","value":"Report Data Provider link(-s)","depth":3}],"terms":[{"id":"link","title":"link","content":"<p>connects th2 entities (dictionaries or boxes) between each other. </p>\n"}],"meta":{"contentTreeJSON":"[{\"title\":\"codec\",\"path\":\"/modules/codec/\",\"weight\":-100,\"followPath\":\"/modules/codec/overview/\",\"children\":[{\"title\":\"Overview \",\"path\":\"/modules/codec/overview/\",\"weight\":0,\"followPath\":\"/modules/codec/overview/\",\"children\":[]},{\"title\":\"Repositories\",\"path\":\"/modules/codec/repositories/\",\"weight\":5,\"followPath\":\"/modules/codec/repositories/\",\"children\":[]},{\"title\":\"Configuration\",\"path\":\"/modules/codec/config/\",\"weight\":10,\"followPath\":\"/modules/codec/config/\",\"children\":[]},{\"title\":\"Usage\",\"path\":\"/modules/codec/usage/\",\"weight\":20,\"followPath\":\"/modules/codec/usage/\",\"children\":[]}]}]","module_name":"codec","main_path":"/modules/codec/"}}},"context":{}}