{"hash":"ed0a5a389d3618f0823526ee1d1166b55f4800f5","data":{"doc":{"__typename":"ModulePage","title":"check1 - introduction to checkpoints and chain IDs","description":"","content":"\n# check1 - introduction to checkpoints and chain IDs\n\n## Overview\n\nYou can submit all 3 requests to **check1** with a `checkpoint` or `chain_id` and **check1** will return a new `chain_id` value with the response.\n\n## What are Checkpoints\n\nIn order for **check1** to begin verification you must provide a starting point in the message queue. \nThis starting point is called a checkpoint.\n\nCheckpoint data contains the message sequence number in session and the message creation timestamp,\nreturned as a universally unique identifier (UUID) to the **act** component.\n\n![](./img/checkpoint_class.png \"Figure1.Checkpoint Class\")\n\n<center> \n<figcaption class=\"mb-2\">\nFigure 1. Associations with Checkpoint class.\n</figcaption> \n</center>\n\n\nAfter receiving a `CheckpointRequest` from the **act** methods or directly from the script,\n**check1** will locate the last message in all queues, note the sequence number and timestamps \nand send it to the **act** component via `CheckPointResponse`.\n\n![](./img/checkpoint_path.png \"Figure 2.Checkpoint path\")\n\n<center> \n<figcaption class=\"mb-2\">\nFigure 2. A checkpoint is not stored \n</figcaption>\n</center>\n\nThe script receives the checkpoint from **act** and sends it to the **check1**. \n**check1** starts verification from the location and time when the checkpoint was created.\n\n![](./img/message_queue_checkpoint.png \"Figure 3.message_queue_checkpoint\")\n\n<center> \n<figcaption class=\"mb-2\">\nFigure 3. A queue of messages from the same session alias arranged according to the time received and and direction= FIRST \n</figcaption> \n</center>\n\n## Chain ID\n\nA chain id is similar to a checkpoint and is created by **check1**. \nThe `chain_id` caret acts as a pointer and marks the last verified message in a message queue.\n\nChain IDs are usually used to continue verification.\n\n![](./img/chainid_class.png \"Figure 4.chainid_class\")\n\n<center> \n<figcaption class=\"mb-2\">\nFigure 4. The structure of ChainID class.\n</figcaption>\n</center>\n\n\nWhen the `chain_id` parameter in a rule request is `Null`, **check1** generates a `chain_id` caret that points to the verified message. \nAfter verification is completed, this `chain_id` caret stops at the last verified message of the message queue. \n**check1** returns the `chain_id` value in the response and this value is sent back with the next rule request to continue verification. \n**check1** temporarily stores the `chain_id` value. The storage time allocated is set by the **check1** custom configuration `cleanup-older-than` and `cleanup-time-unit`.\n\nJoining several rule requests to continuously check the whole message queue is known as chain verification.\n\n\n![](./img/chainid_flowchart.png \"Figure 4.chainid_flowchart\")\n\n<center> \n<figcaption class=\"mb-2\">\n\nFigure 5. Flowchart illustrating `chain_id`\n\n</figcaption>\n</center>\n\n\n\n## Differences between a checkpoint and chain_id\n\n- A checkpoint marks the last message of a message queue but a chain_id marks the last verified message.\n\n- A checkpoint is used to begin verification but chain_id's are used to continue verification.\n\n- Checkpoints are not stored in check1 but chain_id's are temporarily stored in check1\n\n- If the value of the chain_id is provided in a rule request, the checkpoint is ignored.\n","fileInfo":{"path":"check1/checkpoints.md"},"headings":[{"anchor":"#check1---introduction-to-checkpoints-and-chain-ids","value":"check1 - introduction to checkpoints and chain IDs","depth":1},{"anchor":"#overview","value":"Overview","depth":2},{"anchor":"#what-are-checkpoints","value":"What are Checkpoints","depth":2},{"anchor":"#chain-id","value":"Chain ID","depth":2},{"anchor":"#differences-between-a-checkpoint-and-chain_id","value":"Differences between a checkpoint and chain_id","depth":2}],"terms":[],"meta":{"contentTreeJSON":"[{\"title\":\"check1\",\"path\":\"/modules/check1/\",\"weight\":-100,\"followPath\":\"/modules/check1/overview/\",\"children\":[{\"title\":\"Overview\",\"path\":\"/modules/check1/overview/\",\"weight\":-10,\"followPath\":\"/modules/check1/overview/\",\"children\":[]},{\"title\":\"Rule requests\",\"path\":\"/modules/check1/rulerequests/\",\"weight\":5,\"followPath\":\"/modules/check1/rulerequests/\",\"children\":[]},{\"title\":\"Checkpoints\",\"path\":\"/modules/check1/checkpoints/\",\"weight\":10,\"followPath\":\"/modules/check1/checkpoints/\",\"children\":[]},{\"title\":\"Communication\",\"path\":\"/modules/check1/communication/\",\"weight\":15,\"followPath\":\"/modules/check1/communication/\",\"children\":[]},{\"title\":\"Configuration\",\"path\":\"/modules/check1/configuration/\",\"weight\":20,\"followPath\":\"/modules/check1/configuration/\",\"children\":[]},{\"title\":\"Verification\",\"path\":\"/modules/check1/verification-rulerequests/\",\"weight\":25,\"followPath\":\"/modules/check1/verification-rulerequests/\",\"children\":[]}]}]","module_name":"check1","main_path":"/modules/check1/"}}},"context":{}}