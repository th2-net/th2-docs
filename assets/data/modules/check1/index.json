{"hash":"6ef0358d047a2d3ed5d3f9e87087319b08aad66e","data":{"doc":{"title":"check1 - a brief introduction","inner_title":"","description":"","content":"\n# check1 - a brief introduction\n\n<!-- TODO: Add usecase subpage -->\n\n## Overview\n\n**check1** is the component of the th2 system that checks if a message(s) sent by the system under test (a real exchange or simulator) is accurate. \nThis process is called <term term=\"verification\">verification</term>. \nVerification is an essential part of the testing process because it allows you to ensure that a system is functioning properly. \nVerification is performed by comparing the actual results produced by a system to your expected results. \nYou can write a script or create a model to send your expected results to **check1**.\n\nBy using **check1** you will be able to:\n\n- identify the message(s) from the system related to your order message;\n\n- identify the missing or extra messages by the system;\n\n- check the order of the messages received;\n\n- verify that the information contained within a system message is correct.\n\n\n## Family\nThe following repositories are required by **th2-check1** module:\n\n- [th2-check1](https://github.com/th2-net/th2-check1)\n  - The check1 repository contains the source code which can be used to generate an image for a docker container. But the **check1** image is already in the registry for use. This image is pulled to Kubernetes to create a pod.\n- [th2-grpc-check1](https://github.com/th2-net/th2-grpc-check1)\n  - the gRPC check1 library. This library is required for communication by gRPC and includes the `check1.proto` file described below. This library is also used to create and publish the required packages in Python or Java.\n  - [th2-check1.proto](https://github.com/th2-net/th2-grpc-check1/blob/master/src/main/proto/th2_grpc_check1/check1.proto)\n    - The gRPC `check1.proto` file contains the definitions of **check1** service and the data structure of the requests and responses.\n- [th2-grpc-common](https://github.com/th2-net/th2-grpc-common)\n  - This library contains common proto messages that are used in all th2 components. Tool generates code from `.proto` files and uploads built packages (`.proto` files and generated code) to specified repositories.\n  - [th2-grpc-common.proto](https://github.com/th2-net/th2-grpc-common/blob/master/src/main/proto/th2_grpc_common/common.proto)\n    - this gRPC `common.proto` file contains definitions on common classes required by the check1 service.\n\n\nA `.proto` file is the interface definition written using Interface Definition Language (IDL) from Protocol Buffers and defines the interface between a client and server for gRPC. \nThe Protocol Buffers IDL is a custom, platform-neutral language with an open specification.\n\nThe `.proto` file is used to automatically generate language - or platform-specific stubs for clients and servers. \nStubs are needed for parameter conversion so that servers can understand the client requests. \nThe client program imports this interface, while the server program exports this interface.\n\nThe interface allows two components written in two languages to communicate with each other. \nBy sharing `.proto` files, teams can generate code to use each others' services, without needing to take a code dependency.\n\nMore information is available at [Protocol Buffers](https://developers.google.com/protocol-buffers/docs/overview)\n\n","fileInfo":{"path":"modules/check1/_index.md"},"headings":[{"anchor":"#check1---a-brief-introduction","value":"check1 - a brief introduction","depth":1},{"anchor":"#overview","value":"Overview","depth":2},{"anchor":"#family","value":"Family","depth":2}],"read_before":[],"continue_learning":[],"terms":[{"id":"verification","title":"verification","content":"<p>The act of comparing the actual to the expected. </p>\n"}],"related":[],"hide_releases":null,"_githubRepository":{"html_url":"https://github.com/th2-net/th2-check1","language":"Kotlin","description":"","updated_at":"2022-03-18T16:41:09Z","owner":{"html_url":"https://github.com/th2-net","avatar_url":"https://avatars.githubusercontent.com/u/73948563?v=4","login":"th2-net"},"releases":[{"id":"55097495","name":"Release 3.9.0","tag_name":"v3.9.0","body":"# What's new in release 3.9.0\r\n\r\nTo work with check1 3.9.0 you need to install the grpc-check1 library with version [3.5.1](https://github.com/th2-net/th2-grpc-check1/releases/tag/v3.5.1) or higher.\r\n\r\n## New features\r\n\r\n### Silence check after CheckSequence rule and NoMessageCheck rule\r\n\r\nThere are some cases when you expect some messages sequence to be received and nothing more matches key fields in that sequence is received after that.\r\nIn the previous check1 version, there was no such functionality.\r\nThe release 3.9.0 introduces two ways of doing that:\r\n+ Automated silence check after CheckSequence rule;\r\n+ NoMessageCheck rule for manual verification.\r\n\r\n#### Silence check\r\n\r\nThis functionality adds verification that no more messages that match the `pre-filter` in the CheckSequence rule\r\nwas received after the rule main CheckSequence rule is completed.\r\nThe timeout for which the silence check awaits the messages is either the `cleanup timeout` (`cleanup-older-than` + `cleanup-time-unit`) is exceeded\r\nor the next rule has been submitted to the chain.\r\nYou can enable it per request by `silence_check` parameter.\r\n```python\r\nfrom google.protobuf import wrappers_pb2 as wrappers\r\n\r\nCheckSequenceRuleRequest(\r\n  # ...\r\n  silence_check=wrappers.BoolValue(value=True) # or False, or you might not set silence_check at all\r\n)\r\n```\r\n```java\r\nimport com.exactpro.th2.check1.grpc.CheckSequenceRuleRequest;\r\n\r\nCheckSequenceRuleRequest.newBuilder()\r\n    .setSilenceCheck(BoolValue.of(true)) // or false, or you might not set silenceCheck at all\r\n```\r\nIf it is not set the silence check will be added automatically if the `auto-silence-check-after-sequence-rule` in check1 configuration is enabled.\r\n\r\n#### NoMessagesCheck rule\r\n\r\nThis rule allows you to check that no messages that match the specified filter were received during a certain time period.\r\nIt is very similar to the silence check but can be used independently.\r\nThe timeout for the rule might be specified based on real-time or messages time.\r\n\r\n### Timeout for rules based on the message's time\r\n\r\nThe current version of check1 allows you to specify the timeout that is based on real-time.\r\nWhen a user specifies the small timeout to make sure that messages were received quickly enough it might cause unexpected rule failure.\r\nIt happens because check1 processes messages with a different speed depending on the load and resources.\r\nAnd in some cases, the message you need to verify might be received by check1 but not yet processed.\r\n\r\nHere comes the `message_timeout` parameter. It allows you to specify the timeout based on the messages' timestamps.\r\n**Please note, that using `message_timeout` requires either a `checkpoint` or an existing `chain_id`.**\r\nThey are required to compute borders for message timestamp. \r\nYou can specify a small `message_timeout` and a bigger `timeout` to allow check1 process messages.\r\nWhen it sees the message with a timestamp that exceeds the computed borders it completes the rule. \r\n\r\n### Default `timeout`\r\n\r\nThere is a new `rule-execution-timeout` parameter that allows you to specify the default `timeout`\r\nfor rule execution if the request does not contain one.\r\nIt allows you to specify only the `message_timeout` in the request.\r\n\r\n### Precision for comparing numbers and date-time values\r\n\r\nThe new version of check1 allows you to use precision for comparing numbers and date-time values.\r\nTo get the advantage of comparison with the precision you should use `EQ_TIME_PRECISION` or `EQ_DECIMAL_PRECISION` operation\r\ndepending on the value type you try to compare.\r\nThere are default precisions for those operations. They can be specified using `time-precision` and `decimal-precision` parameters in check1 configuration.\r\nAlso, you can specify the precision per filter. The `RootComparisonSettings` now has two parameters:\r\n* **time_precision** - is used to specify the precision for comparing date-time values (please note, that they should be represented in ISO format)\r\n  Examples:\r\n  ```python\r\n  import datetime\r\n  \r\n  td = datetime.timedelta(days=3, minutes=10)\r\n  duration = Duration()\r\n  duration.FromTimedelta(td)\r\n  RootComparisonSettings(\r\n    # other parameters\r\n    time_precision=duration\r\n  )\r\n  ```\r\n  ```java\r\n  import com.exactpro.th2.common.grpc.RootComparisonSettings;\r\n  import com.google.protobuf.util.Durations;\r\n  \r\n  RootComparisonSettings.newBuilder()\r\n    .setTimePrecision(Durations.fromMillis(100))\r\n    .build();\r\n  ```\r\n* **decimal_precision** - is used to specify the precision for comparing numbers. Can be in engineering format and the regular one (e.g. 125E-3 or 0.125)\r\n\r\n### Null value filter\r\n\r\nNow you can assert that the message contains some field with `null` value (the field presents in the message but it has a value of `null`).\r\nNOTE: only EQUAL and NOT_EQUAL operations are supported.\r\n\r\nExample:\r\n```python\r\nValueFilter(\r\n  operation=FilterOperation.EQUAL,\r\n  null_value=NullValue\r\n)\r\n```\r\n\r\n```java\r\nimport com.exactpro.th2.common.grpc.ValueFilter;\r\nimport com.exactpro.th2.common.grpc.NullValue;\r\n\r\nValueFilter.newBuilder()\r\n    .setOperation(FilterOperation.EQUAL)\r\n    .setNullValue(NullValue.NULL_VALUE)\r\n    .build();\r\n```\r\n\r\n## Changes\r\n\r\n### Consider null value in a message as empty\r\n\r\nThe default behavior regarding `null` values in a message has been changed in check1.\r\nIf the field presents in the message and has the value `null` the EMPTY filter won't pass anymore.\r\nThe opposite for NOT_EMPTY. It will pass in case the field exists but has a `null` value.\r\nIf you want to enable the old behavior you can switch it using `check-null-value-as-empty` parameter in the check1 configuration.\r\n\r\n### Failure reason improvements\r\n\r\nWhen you specify the filter and the actual message has that field but the content type is different (you expected the simple value but a sub-message was received in the message)\r\nthe old version of check1 did not say anything useful and just marked the field as failed.\r\nAlso, when something happened during field comparison there was no information about what has happened. \r\nStarting with version 3.9.0 the `hint` is added in these cases. You will see in the UI a message that explains what has happened.\r\nNOTE: this improvement will work only with a report-viewer version 3.1.95 or higher.\r\n\r\n### Displaying `null` and string values in verification\r\n\r\nThe previous version of check1 did not separate the `null` value and the string `\"null\"`.\r\nIt might cause a misunderstanding of the verification result. Version 3.9.0 reports the values regarding the actual value.\r\n\r\nNOTE: this improvement will work only with a report-viewer version 3.1.102 or higher.\r\n\r\n## Fixes\r\n\r\n### failUnexpected parameter was not propagated to sub-messages\r\n\r\nThere was a problem when you specify the `failUnxpected` parameter but fields in sub-messages (or collections of messages)\r\ndoes not cause a failure. That was happening because the parameter's value was not propagated to the sub-messages.\r\n\r\n### Incorrect matching of repeating groups\r\n\r\nThere was a problem with matching repeating groups when the filter contains fewer elements than the actual message\r\nand they are received in a different order. In this case, check1 might match the incorrect elements and the verification result might confuse users.","published_at":"2021-12-13T06:18:29Z"},{"id":"51444929","name":"Release 3.8.0","tag_name":"v3.8.0","body":"# What’s new in release 3.8.0\r\n\r\n**To work with check1 3.8.0 you need to install the grpc-check1 library with version [3.4.2](https://github.com/th2-net/th2-grpc-check1/releases/tag/v3.4.2) or higher.**\r\n\r\n## New features\r\n\r\n### Description for each verification in CheckSequenceRule\r\n\r\nNow `RootMessageFilter` has an optional field `description` that can be used to add custom information to a verification event in check1.\r\n```python\r\nfrom google.protobuf import wrappers_pb2 as wrappers\r\n\r\n# ...\r\n\r\nRootMessageFilter(\r\n  messageType=\"YourMessage\",\r\n  message_filter=MessageFilter(...),\r\n  description=wrappers.StringValue(\"You description\")\r\n)\r\n```\r\n\r\n### New filter operations are added to ValueFilter\r\n\r\nCheck1 now has support for new operation for checking field's value:\r\n\r\n**IN/NOT_IN** - check if the value of the field presents/does not present in the specified list\r\n\r\n```python\r\nValueFilter(\r\n    simple_list=SimpleList(simple_values=[\"A\", \"B\"]),\r\n    operation=FilterOperation.IN # or FilterOperation.NOT_IN\r\n)\r\n```\r\n\r\n**LIKE/NOT_LIKE** - check if the value of the field matches or not the specified regexp\r\n\r\n```python\r\nValueFilter(\r\n    simple_filter=\"your[Rr]egexp.*\",\r\n    operation=FilterOperation.LIKE # or FilterOperation.NOT_LIKE\r\n)\r\n```\r\n\r\n**LESS/MORE/NOT_LESS/NOT_MORE** - compares the value of the field with the specified value. Works for decimal values and DateTime values (in ISO-8601 format)\r\n\r\n```python\r\nValueFilter(\r\n    simple_filter=\"42\",\r\n    operation=FilterOperation.LESS\r\n)\r\n```\r\nFor DataTime\r\n```python\r\nValueFilter(\r\n    simple_filter=\"2007-12-03T10:15:30\",\r\n    operation=FilterOperation.NOT_LESS\r\n)\r\n```\r\n\r\n**WILDCARD/NOT_WILDCARD** - similar to the LIKE/NOT_LIKE but uses wildcard matching instead of regexp.\r\n\r\n```python\r\nValueFilter(\r\n    simple_filter=\"your?egexp*\", # ? - any symbol, * - zero or more symbols\r\n    operation=FilterOperation.WILDCARD # or FilterOperation.NOT_WILDCARD\r\n)\r\n```\r\n\r\n### Checking metadata properties.\r\n\r\nA new `MetadataFilter` was added to `RootMessageFilter` and `PreFilter`. Can be used to check metadata properties. Supports all new operations.\r\n\r\nExamples:\r\n\r\n```python\r\nfrom th2_grpc_check1.check1_pb2 import PreFilter\r\nfrom th2_grpc_common.common_pb2 import RootMessageFilter, MetadataFilter, FilterOperation\r\n\r\n# ...\r\n\r\n# message filter\r\nRootMessageFilter(\r\n    metadata_filter=MetadataFilter(\r\n        property_filters={\r\n            'test.prop': MetadataFilter.SimpleFilter(\r\n                operation=FilterOperation.EQUAL,\r\n                value=\"test\"\r\n            ),\r\n            'another.prop': MetadataFilter.SimpleFilter(\r\n                operation=FilterOperation.IN,\r\n                simple_list=SimpleList(simple_values=[\"A\", \"B\"])\r\n            )\r\n        }\r\n    )\r\n)\r\n\r\n# pre-filter\r\nPreFilter(\r\n    metadata_filter=MetadataFilter(\r\n        property_filters={\r\n            'test.prop': MetadataFilter.SimpleFilter(\r\n                operation=FilterOperation.EQUAL,\r\n                value=\"test\"\r\n            ),\r\n            'another.prop': MetadataFilter.SimpleFilter(\r\n                operation=FilterOperation.IN,\r\n                simple_list=SimpleList(simple_values=[\"A\", \"B\"])\r\n            )\r\n        }\r\n    )\r\n)\r\n```\r\n\r\n### Verify repeating groups order in the message.\r\n\r\nAllows check1 to verify the order of the elements in the collection fields.\r\nIf the flag is set the check1 one will pass the comparison only if the actual order of elements in the collection matches the filter.\r\n\r\n```python\r\nfrom th2_grpc_common.common_pb2 import RootMessageFilter, RootComparisonSettings, MessageFilter, ValueFilter, ListValue\r\n\r\n# ...\r\n\r\nRootMessageFilter(\r\n    metadata_filter=MessageFilter(\r\n        fields={\r\n            'collection': ValueFilter(\r\n                list_filter=ListValue(\r\n                    values=[\r\n                        ValueFilter(simple_filter=\"1\"),\r\n                        ValueFilter(simple_filter=\"2\")\r\n                    ]\r\n                )\r\n            )\r\n        }\r\n    ),\r\n    comparison_settings=RootComparisonSettings(\r\n        check_repeating_group_order=True\r\n    )\r\n)\r\n```\r\n\r\n## Deprecations:\r\n\r\nSome existing properties in message filters and rule requests were deprecated and will be removed in a future major release.\r\nPlease, check the list below and migrate from the deprecated properties to new ones.\r\n\r\n### RootMessageFilter instead of MessageFilter\r\n\r\n`CheckRuleRequest` and `CheckSequenceRuleRequest` now uses `RootMessageFilter` for declaring the message's filter.\r\nIt contains the information about message type and filters for the message's body (`message_filter` field) and metadata (`metadata_filter` field).\r\nThe general settings for comparison were moved to the `RootMessageFilter` as well (`RootComparisonSettings` in `comparison_settings` field).\r\n\r\nOld check rule request example:\r\n\r\n```python\r\nCheckRuleRequest(\r\n  connectivity_id=ConnectionID(session_alias='test'),\r\n  filter=MessageFilter(\r\n    messageType=\"A\",\r\n    comparison_settings=ComparisonSettings(\r\n      ignore_fields=['a','b'],\r\n      fail_unexpected=FailUnexpected.FIELDS\r\n    ),\r\n    fields={...}\r\n  ),\r\n  ...\r\n)\r\n```\r\n\r\nNew request:\r\n\r\n```python\r\nCheckRuleRequest(\r\n  connectivity_id=ConnectionID(session_alias='test'),\r\n  root_filter=RootMessageFilter(\r\n    messageType=\"A\",\r\n    message_filter=MessageFilter(\r\n      fields={...},\r\n      comparison_settings=ComparisonSettings(fail_unexpected=FailUnexpected.FIELDS)\r\n    ),\r\n    comparison_settings=RootComparisonSettings(\r\n      ignore_fields=['a','b'],\r\n      check_repeating_group_order=true\r\n    )\r\n  ),\r\n  ...\r\n)\r\n```\r\n\r\n## Reporting improvements:\r\n\r\n### Add metrics for view number of active caches and actual cache size into check1\r\n\r\nCheck1 now exports a number of metrics that will help to get information about current check1's state.\r\n\r\n* `th2_check1_actual_cache_number` - actual number of messages in caches\r\n* `th2_check1_active_tasks_number` - actual number of currently working rules\r\n\r\nThe `th2_check1_actual_cache_number` metric uses two labels:\r\n* `session_alias` - session alias of received message\r\n* `direction` - direction of received message\r\n\r\nThe `th2_check1_active_tasks_number` metric use `rule_type` label\r\n\r\n### \"No message found\" table improvements\r\n\r\nThe event with submitted filters when no messages were found became more informative:\r\n\r\n* Information about expected message's type and message's metadata extracted into a separate table;\r\n* The expected values in the submitted filter are displayed in a more convenient way (the operation and values are joined together);\r\n* Comparison settings extracted into a separate table.\r\n\r\n### Keep verification order for repeating groups matches the original order\r\n\r\nThe previous version of check1 displayed the elements of collections in verification from the best match to the worst match.\r\nIt could confuse users. They might start to think that the actual message has incorrect order of elements in the collection.\r\nThe new version respects the actual order and displays elements in the verification respectively.\r\n\r\n### Correct reporting about incorrect parameters and internal errors\r\n\r\nThe previous version of check1 did not notify a user about incorrect parameters or internal errors during the message processing.\r\nNot check1 will verify request parameters and report an error if some parameters are not set or have incorrect values.\r\nWhen an internal error has occurred the event with its description will be created and added to the report.\r\n\r\n### Correct root event name for rules\r\n\r\nThe previous version of check1 created root events with rule type prefix and session alias and direction pair before the description set by the user. The new version changes that. The root event name now consists of the rule type prefix and the user's description. The information about the session alias and direction was moved to the event body.\r\n\r\n## Fixes:\r\n\r\n### Submitted rule begins executing before it has been configured fully\r\n\r\nThere was an issue when the rule finds all it needs before it was fully initialized.\r\nThe new version fixes that issue and initializes the rule before it starts processing messages.","published_at":"2021-10-15T16:38:43Z"},{"id":"34533779","name":"v2.4.0-beta","tag_name":"v2.4.0-beta","body":"Version for demo-configuration and demo-script.","published_at":"2020-11-28T16:21:16Z"}]}},"readmeDoc":null},"context":{}}